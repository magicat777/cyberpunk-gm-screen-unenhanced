<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cyberpunk GM Screen - Enhanced Edition</title>
  
  <!-- PWA Meta Tags -->
  <meta name="theme-color" content="#00ffff">
  <meta name="mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="apple-mobile-web-app-title" content="CP GM Screen">
  <meta name="msapplication-TileColor" content="#00ffff">
  <meta name="msapplication-TileImage" content="src/images/icon-192x192.png">
  
  <!-- PWA Manifest -->
  <link rel="manifest" href="manifest.json">
  
  <!-- Icons -->
  <link rel="icon" type="image/png" sizes="32x32" href="src/images/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="src/images/favicon-16x16.png">
  <link rel="apple-touch-icon" sizes="180x180" href="src/images/apple-touch-icon.png">
  
  <!-- Google Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;600;900&family=Share+Tech+Mono&display=swap" rel="stylesheet">
  
  <!-- Stylesheets -->
  <link rel="stylesheet" href="src/styles/design-system.css">
  <link rel="stylesheet" href="src/styles/cyberpunk-typography.css">
  <link rel="stylesheet" href="src/styles/cyberpunk-background.css">
  <link rel="stylesheet" href="src/styles/themes.css">
  <link rel="stylesheet" href="src/styles/enhanced-panels-fixed.css">
  <link rel="stylesheet" href="src/styles/cybernetic-theme.css">
  
  <style>
    :root {
      --header-height: 60px;
    }
    
    body {
      margin: 0;
      padding: 0;
      font-family: var(--font-primary);
      color: var(--text-primary);
      background: var(--bg-primary);
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }
    
    .main-container {
      flex: 1;
      position: relative;
      overflow: hidden;
    }
    
    /* Header Styles */
    .app-header {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      height: var(--header-height);
      background: var(--bg-surface);
      border-bottom: 2px solid var(--border-color);
      z-index: 10000;
      box-shadow: 0 2px 10px rgba(0,0,0,0.5);
    }
    
    .header-main {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 20px;
    }
    
    .header-left {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .menu-toggle {
      padding: 8px 12px;
      background: transparent;
      border: 1px solid var(--border-color);
      color: var(--text-primary);
      cursor: pointer;
      font-size: 20px;
      border-radius: 4px;
      transition: all 0.3s;
    }
    
    .menu-toggle:hover {
      background: var(--bg-overlay);
      border-color: var(--primary);
      color: var(--primary);
    }
    
    .header-brand {
      display: flex;
      align-items: baseline;
      gap: 15px;
      flex: 1;
      margin-left: 20px;
    }
    
    .header-title {
      margin: 0;
      font-size: 1.5rem;
      font-weight: 900;
      color: var(--primary);
      text-transform: uppercase;
      letter-spacing: 2px;
      font-family: var(--font-display);
    }
    
    .header-subtitle {
      font-size: 0.9rem;
      color: var(--text-secondary);
    }
    
    .header-actions {
      display: flex;
      gap: 10px;
    }
    
    .header-btn {
      padding: 8px 12px;
      background: transparent;
      border: 1px solid var(--border-color);
      color: var(--text-primary);
      cursor: pointer;
      font-size: 16px;
      border-radius: 4px;
      transition: all 0.3s;
    }
    
    .header-btn:hover {
      background: var(--bg-overlay);
      border-color: var(--primary);
      color: var(--primary);
    }
    
    /* Side Tray Styles */
    .side-tray {
      position: fixed;
      top: var(--header-height, 60px);
      left: -300px;
      width: 300px;
      height: calc(100% - var(--header-height, 60px));
      background: var(--bg-surface);
      border-right: 2px solid var(--border-color);
      z-index: 9999;
      transition: left 0.3s ease;
      box-shadow: 2px 0 10px rgba(0,0,0,0.5);
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }
    
    .side-tray.open {
      left: 0;
    }
    
    .tray-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 20px;
      background: rgba(0,0,0,0.5);
      border-bottom: 2px solid var(--border-color);
      flex-shrink: 0;
    }
    
    .tray-content-wrapper {
      flex: 1;
      overflow-y: auto;
      overflow-x: hidden;
    }
    
    .tray-content-wrapper::-webkit-scrollbar {
      width: 8px;
    }
    
    .tray-content-wrapper::-webkit-scrollbar-track {
      background: var(--bg-surface);
    }
    
    .tray-content-wrapper::-webkit-scrollbar-thumb {
      background: var(--border-color);
      border-radius: 4px;
    }
    
    .tray-content-wrapper::-webkit-scrollbar-thumb:hover {
      background: var(--primary);
    }
    
    .tray-title {
      margin: 0;
      font-size: 1.2rem;
      color: var(--primary);
      font-family: var(--font-display);
      text-transform: uppercase;
      letter-spacing: 1px;
    }
    
    .tray-close {
      width: 32px;
      height: 32px;
      background: transparent;
      border: 1px solid var(--border-color);
      color: var(--text-primary);
      cursor: pointer;
      font-size: 20px;
      border-radius: 4px;
      transition: all 0.3s;
    }
    
    .tray-close:hover {
      background: var(--danger);
      border-color: var(--danger);
      color: white;
    }
    
    .tray-content {
      padding: 20px;
    }
    
    .tray-section {
      margin-bottom: 30px;
    }
    
    .tray-section-title {
      margin: 0 0 15px 0;
      font-size: 0.9rem;
      color: var(--text-secondary);
      text-transform: uppercase;
      letter-spacing: 1px;
    }
    
    /* Accordion Styles */
    .accordion-container {
      display: flex;
      flex-direction: column;
      gap: 2px;
    }
    
    .accordion-section {
      border: 1px solid rgba(0, 255, 255, 0.2);
      border-radius: 4px;
      background: rgba(0, 255, 255, 0.02);
      overflow: hidden;
      transition: all 0.3s ease;
    }
    
    .accordion-header {
      width: 100%;
      padding: 12px 16px;
      background: rgba(0, 255, 255, 0.1);
      border: none;
      color: var(--text-accent);
      font-size: 13px;
      font-weight: bold;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: space-between;
      transition: all 0.3s ease;
      position: relative;
      font-family: inherit;
    }
    
    .accordion-header:hover {
      background: rgba(0, 255, 255, 0.15);
      color: var(--primary);
      box-shadow: 0 0 10px rgba(0, 255, 255, 0.3);
    }
    
    .accordion-header.active {
      background: rgba(0, 255, 255, 0.2);
      color: var(--primary);
    }
    
    .accordion-icon {
      margin-right: 8px;
      font-size: 14px;
    }
    
    .accordion-title {
      flex: 1;
      text-align: left;
    }
    
    .accordion-chevron {
      font-size: 12px;
      transition: transform 0.3s ease;
      color: var(--text-secondary);
    }
    
    .accordion-chevron.rotated {
      transform: rotate(180deg);
    }
    
    .accordion-content {
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease-out;
      background: rgba(0, 0, 0, 0.2);
      padding: 8px 8px 0 8px;
    }
    
    .accordion-content.expanded {
      max-height: 1000px;
    }
    
    .accordion-content .tray-btn {
      margin: 0 0 2px 0;
      border-radius: 4px;
      border: 1px solid rgba(0, 255, 255, 0.1);
      background: transparent;
      padding: 12px 16px;
      width: 100%;
      box-sizing: border-box;
      text-align: left;
      flex-wrap: wrap;
    }
    
    .accordion-content .tray-btn:hover {
      background: rgba(0, 255, 255, 0.1);
      transform: none;
    }
    
    .accordion-content .tray-btn:last-child {
      margin-bottom: 0;
    }
    
    .accordion-content .volume-control {
      padding: 8px 16px;
      margin: 0 0 2px 0;
      background: rgba(0, 255, 255, 0.05);
      border: 1px solid rgba(0, 255, 255, 0.1);
      border-radius: 4px;
    }
    
    .tray-btn {
      display: flex;
      align-items: center;
      gap: 10px;
      width: 100%;
      padding: 12px 16px;
      margin-bottom: 8px;
      background: var(--bg-overlay);
      border: 1px solid var(--border-color);
      color: var(--text-primary);
      cursor: pointer;
      font-family: var(--font-secondary);
      font-size: 14px;
      text-align: left;
      border-radius: 4px;
      transition: all 0.3s;
      box-sizing: border-box;
      min-height: 44px;
      line-height: 1.4;
      word-wrap: break-word;
      overflow-wrap: break-word;
    }
    
    .tray-btn:hover:not(.disabled) {
      background: var(--bg-surface);
      border-color: var(--primary);
      color: var(--primary);
      box-shadow: var(--glow-small) var(--primary);
      transform: translateX(5px);
    }
    
    .tray-btn.disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    .tray-btn .icon {
      font-size: 18px;
      flex-shrink: 0;
      min-width: 20px;
      text-align: center;
    }
    
    /* Footer Styles */
    .app-footer {
      background: var(--bg-surface);
      border-top: 2px solid var(--border-color);
      padding: 10px 20px;
      text-align: center;
      z-index: 10000;
    }
    
    .footer-content {
      font-size: 14px;
      color: var(--text-secondary);
    }
    
    .footer-separator {
      margin: 0 10px;
      color: var(--border-color);
    }
    
    /* Minimized Panel Bar */
    .minimized-panel-bar {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: var(--bg-surface);
      border-top: 2px solid var(--border-color);
      padding: 10px;
      z-index: 1000;
      box-shadow: 0 -2px 10px rgba(0,0,0,0.5);
    }
    
    .minimized-panels-container {
      display: flex;
      gap: 10px;
      overflow-x: auto;
      scrollbar-width: thin;
    }
    
    .minimized-panel-btn {
      padding: 8px 16px;
      background: var(--bg-overlay);
      border: 1px solid var(--border-color);
      color: var(--text-primary);
      cursor: pointer;
      white-space: nowrap;
      font-family: var(--font-secondary);
      font-size: 14px;
      transition: all 0.3s;
      border-radius: 4px;
    }
    
    .minimized-panel-btn:hover {
      background: var(--bg-surface);
      border-color: var(--primary);
      color: var(--primary);
      box-shadow: var(--glow-small) var(--primary);
    }
    
    .quick-start {
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 1000;
      display: flex;
      gap: 10px;
    }
    
    .quick-start-btn {
      padding: 10px 20px;
      background: var(--bg-overlay);
      border: 1px solid var(--border-color);
      color: var(--text-primary);
      cursor: pointer;
      transition: all 0.3s;
      font-family: var(--font-secondary);
      font-size: 14px;
    }
    
    .quick-start-btn:hover {
      background: var(--bg-surface);
      border-color: var(--primary);
      color: var(--primary);
      box-shadow: var(--glow-small) var(--primary);
    }
    
    /* Mobile Panel System */
    .mobile-panel-nav {
      display: none;
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      height: 60px;
      background: var(--bg-surface);
      border-top: 2px solid var(--primary);
      z-index: 9999;
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }
    
    .mobile-panel-tabs {
      display: flex;
      height: 100%;
      align-items: center;
      padding: 0 10px;
      gap: 10px;
      min-width: max-content;
    }
    
    .mobile-panel-tab {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 8px 16px;
      background: var(--bg-overlay);
      border: 1px solid var(--border-color);
      border-radius: 4px;
      color: var(--text-primary);
      font-size: 12px;
      white-space: nowrap;
      cursor: pointer;
      transition: all 0.3s;
      min-width: 80px;
    }
    
    .mobile-panel-tab.active {
      background: var(--primary);
      color: var(--bg-primary);
      border-color: var(--primary);
      box-shadow: var(--glow-small) var(--primary);
    }
    
    .mobile-panel-tab .icon {
      font-size: 20px;
      margin-bottom: 4px;
    }
    
    .mobile-add-panel {
      position: fixed;
      bottom: 70px;
      right: 20px;
      width: 56px;
      height: 56px;
      background: var(--primary);
      border-radius: 50%;
      display: none;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      color: var(--bg-primary);
      box-shadow: 0 4px 10px rgba(0,0,0,0.5);
      cursor: pointer;
      z-index: 9998;
      transition: all 0.3s;
    }
    
    .mobile-add-panel:active {
      transform: scale(0.95);
    }
    
    /* Mobile Panel Container adjustments */
    @media (max-width: 768px) {
      body {
        padding-bottom: 60px; /* Space for mobile nav */
      }
      
      .app-header {
        position: fixed;
        top: 0;
        height: 50px;
      }
      
      .header-title {
        font-size: 1.2rem;
      }
      
      .header-subtitle {
        display: none;
      }
      
      .main-container {
        padding-top: 50px;
        height: calc(100vh - 50px - 60px); /* Header and bottom nav */
        overflow: hidden;
      }
      
      .panel-container {
        height: 100%;
        padding: 0;
        overflow: hidden;
      }
      
      /* Hide desktop panel controls on mobile */
      .panel {
        position: fixed !important;
        top: 50px !important;
        left: 0 !important;
        right: 0 !important;
        bottom: 60px !important;
        width: 100% !important;
        height: calc(100vh - 110px) !important;
        transform: none !important;
        margin: 0 !important;
        border-radius: 0 !important;
        display: none;
      }
      
      .panel.mobile-active {
        display: flex;
      }
      
      .panel-header {
        cursor: default !important;
        padding: 10px;
        min-height: 40px;
      }
      
      .panel-title {
        font-size: 14px;
      }
      
      .panel-control.minimize,
      .panel-control.maximize,
      .panel-control.close {
        display: none !important;
      }
      
      .panel-content {
        padding: 10px;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
      }
      
      .resize-handle {
        display: none !important;
      }
      
      /* Show mobile navigation */
      .mobile-panel-nav {
        display: block;
      }
      
      .mobile-add-panel {
        display: flex;
      }
      
      /* Side tray full screen on mobile */
      .side-tray {
        width: 100%;
        left: -100%;
        top: 0;
        height: 100%;
        z-index: 10001;
      }
      
      .side-tray.open {
        left: 0;
      }
      
      /* Minimized panel bar hidden on mobile */
      .minimized-panel-bar {
        display: none !important;
      }
      
      /* Quick start buttons hidden on mobile */
      .quick-start {
        display: none !important;
      }
      
      /* Footer hidden on mobile */
      .app-footer {
        display: none !important;
      }
      
      /* Touch feedback */
      .mobile-panel-tab:active {
        transform: scale(0.95);
        opacity: 0.8;
      }
      
      /* Swipe indicator */
      .swipe-indicator {
        position: fixed;
        bottom: 120px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0,255,255,0.2);
        padding: 5px 15px;
        border-radius: 20px;
        font-size: 12px;
        opacity: 0;
        transition: opacity 0.3s;
        pointer-events: none;
        z-index: 9997;
      }
      
      .swipe-indicator.show {
        opacity: 1;
      }
    }
    
    /* Save indicator */
    .save-indicator {
      position: fixed;
      top: 70px;
      right: 20px;
      background: var(--bg-surface);
      border: 1px solid var(--success);
      padding: 8px 16px;
      border-radius: 4px;
      font-size: 12px;
      color: var(--success);
      opacity: 0;
      transform: translateX(100px);
      transition: all 0.3s;
      z-index: 10001;
      pointer-events: none;
    }
    
    .save-indicator.show {
      opacity: 1;
      transform: translateX(0);
    }
    
    .save-indicator::before {
      content: '✓ ';
      margin-right: 5px;
    }
    
    /* Tablet adjustments */
    @media (min-width: 769px) and (max-width: 1024px) {
      .panel {
        max-width: 500px;
        max-height: 600px;
      }
      
      .panel-container {
        padding: 10px;
      }
    }
    
    /* Encounter Panel Styles */
    .encounter-panel-advanced {
      height: 100%;
      display: flex;
      flex-direction: column;
      color: var(--text-primary);
    }
    
    .encounter-controls {
      padding: 15px;
      background: rgba(0,0,0,0.3);
      border-bottom: 1px solid var(--border-color);
    }
    
    .control-row {
      display: flex;
      gap: 10px;
      margin-bottom: 10px;
      align-items: center;
      flex-wrap: wrap;
    }
    
    .control-row.modifiers {
      margin-top: 15px;
    }
    
    .neon-select, .neon-select-small {
      background: var(--bg-surface);
      border: 1px solid var(--border-color);
      color: var(--text-primary);
      padding: 8px 12px;
      border-radius: 4px;
      font-family: inherit;
      cursor: pointer;
      transition: all 0.3s;
    }
    
    .neon-select:hover, .neon-select-small:hover {
      border-color: var(--primary);
      box-shadow: 0 0 5px var(--primary);
    }
    
    .neon-select:focus, .neon-select-small:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 10px var(--primary);
    }
    
    .neon-select-small {
      padding: 4px 8px;
      font-size: 14px;
    }
    
    .btn-primary, .btn-secondary {
      background: linear-gradient(180deg, #3a3a3a 0%, #2a2a2a 100%);
      border: 2px solid var(--primary);
      color: var(--primary);
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      font-family: inherit;
      font-weight: bold;
      transition: all 0.3s;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .btn-primary:hover {
      background: linear-gradient(180deg, #4a4a4a 0%, #3a3a3a 100%);
      box-shadow: 0 0 15px var(--primary);
      transform: translateY(-2px);
    }
    
    .btn-secondary {
      border-color: var(--accent);
      color: var(--accent);
    }
    
    .btn-secondary:hover {
      box-shadow: 0 0 10px var(--accent);
    }
    
    .btn-primary:disabled, .btn-secondary:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none;
    }
    
    .modifier-group {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .modifier-group label {
      font-size: 12px;
      text-transform: uppercase;
      opacity: 0.7;
    }
    
    .difficulty-slider {
      width: 100px;
    }
    
    .encounter-display {
      flex: 1;
      overflow-y: auto;
      padding: 20px;
    }
    
    .placeholder {
      text-align: center;
      padding: 60px 20px;
      color: var(--text-secondary);
    }
    
    .placeholder-icon {
      font-size: 64px;
      margin-bottom: 20px;
      opacity: 0.5;
    }
    
    .placeholder h3 {
      color: var(--primary);
      margin-bottom: 10px;
      font-size: 24px;
      text-transform: uppercase;
    }
    
    .placeholder p {
      margin-bottom: 30px;
      opacity: 0.8;
    }
    
    .quick-presets h4 {
      color: var(--accent);
      margin-bottom: 10px;
      font-size: 16px;
    }
  </style>
</head>
<body>
  <!-- Audio preload elements for sound effects -->
  <audio id="dice-roll-sound" preload="auto">
    <source src="sounds/dice-roll.mp3" type="audio/mpeg">
    <source src="sounds/dice-roll.ogg" type="audio/ogg">
  </audio>
  <audio id="critical-hit-sound" preload="auto">
    <source src="sounds/critical-hit.mp3" type="audio/mpeg">
    <source src="sounds/critical-hit.ogg" type="audio/ogg">
  </audio>
  <audio id="combat-hit-sound" preload="auto">
    <source src="sounds/combat-hit.mp3" type="audio/mpeg">
    <source src="sounds/combat-hit.ogg" type="audio/ogg">
  </audio>
  <!-- Animated Background -->
  <!-- Will be added by JavaScript -->
  
  <!-- Header Bar -->
  <header class="app-header" id="appHeader">
    <div class="header-main">
      <div class="header-left">
        <button class="menu-toggle" onclick="toggleSideTray()" title="Toggle Menu">
          <span class="icon">☰</span>
        </button>
      </div>
      <div class="header-brand">
        <h1 class="header-title">
          <glitch-text text="Cyberpunk GM Screen" intensity="medium" speed="slow" hover-glitch></glitch-text>
        </h1>
        <span class="header-subtitle">Enhanced Edition</span>
        <div style="display: flex; gap: 8px; margin-left: 20px; align-items: center;">
          <div class="power-indicator" title="System Status"></div>
          <div class="cyber-led" title="Connection Status"></div>
          <div class="cyber-resistor" title="Neural Link"></div>
        </div>
      </div>
      <div class="header-actions">
        <button class="header-btn" onclick="themeManager.cycleTheme()" title="Change Theme">
          <span class="icon">🎨</span>
        </button>
        <button class="header-btn" onclick="showTemplatesDialog()" title="Templates & Layout">
          <span class="icon">📐</span>
        </button>
        <button class="header-btn" onclick="showSettingsDialog()" title="Settings & Utilities">
          <span class="icon">⚙️</span>
        </button>
        <button class="header-btn" onclick="showHelpDialog()" title="Help & Shortcuts">
          <span class="icon">❓</span>
        </button>
      </div>
    </div>
  </header>
  
  <!-- Side Tray -->
  <aside class="side-tray" id="sideTray">
    <div class="tray-header">
      <h3 class="tray-title">Tools & Features</h3>
      <button class="tray-close" onclick="toggleSideTray()">×</button>
    </div>
    <div class="tray-content-wrapper">
      <div class="tray-content accordion-container">
      
        <!-- Game Mechanics Accordion -->
        <div class="accordion-section">
          <button class="accordion-header" onclick="toggleAccordion('gameMechanics')">
            <span class="accordion-icon">🎲</span>
            <span class="accordion-title">Game Mechanics</span>
            <span class="accordion-chevron" id="chevron-gameMechanics">▼</span>
          </button>
          <div class="accordion-content" id="content-gameMechanics">
            <button class="tray-btn" onclick="createDicePanel()">
              <span class="icon">🎲</span> Dice Roller
            </button>
            <button class="tray-btn" onclick="createRulesReferencePanel()">
              <span class="icon">📖</span> Rules Reference
            </button>
            <button class="tray-btn" onclick="createQuickRulesPanel()">
              <span class="icon">⚡</span> Quick Rules
            </button>
            <button class="tray-btn" onclick="createNetrunningPanel()">
              <span class="icon">💻</span> Netrunning Rules
            </button>
          </div>
        </div>

        <!-- Combat & Encounters Accordion -->
        <div class="accordion-section">
          <button class="accordion-header" onclick="toggleAccordion('combat')">
            <span class="accordion-icon">⚔️</span>
            <span class="accordion-title">Combat & Encounters</span>
            <span class="accordion-chevron" id="chevron-combat">▼</span>
          </button>
          <div class="accordion-content" id="content-combat">
            <button class="tray-btn" onclick="createCombatPanel()">
              <span class="icon">⚔️</span> Combat Tracker
            </button>
            <button class="tray-btn" onclick="createAdvancedEncounterPanel()">
              <span class="icon">🎯</span> Encounter Generator
            </button>
            <button class="tray-btn" onclick="createInitiativePanel()">
              <span class="icon">🏃</span> Initiative Tracker
            </button>
            <button class="tray-btn" onclick="createStatusEffectsPanel()">
              <span class="icon">💊</span> Status Effects
            </button>
            <button class="tray-btn" onclick="createEnhancedNetrunningInterface()">
              <span class="icon">🌐</span> Netrunning Interface
            </button>
          </div>
        </div>

        <!-- World Building Accordion -->
        <div class="accordion-section">
          <button class="accordion-header" onclick="toggleAccordion('worldBuilding')">
            <span class="accordion-icon">🌃</span>
            <span class="accordion-title">World Building</span>
            <span class="accordion-chevron" id="chevron-worldBuilding">▼</span>
          </button>
          <div class="accordion-content" id="content-worldBuilding">
            <button class="tray-btn" onclick="createNPCPanel()">
              <span class="icon">👥</span> NPC Generator
            </button>
            <button class="tray-btn" onclick="createLocationPanel()">
              <span class="icon">🏢</span> Location Generator
            </button>
            <button class="tray-btn" onclick="createMapPanel()">
              <span class="icon">🗺️</span> Night City Map
            </button>
            <button class="tray-btn" onclick="createLoreBrowserPanel()">
              <span class="icon">📚</span> Lore Database
            </button>
            <button class="tray-btn" onclick="createCorporationPanel()">
              <span class="icon">🏛️</span> Corporation Generator
            </button>
            <button class="tray-btn" onclick="createGangPanel()">
              <span class="icon">🏴</span> Gang Generator
            </button>
          </div>
        </div>

        <!-- Session Management Accordion -->
        <div class="accordion-section">
          <button class="accordion-header" onclick="toggleAccordion('sessionMgmt')">
            <span class="accordion-icon">📝</span>
            <span class="accordion-title">Session Management</span>
            <span class="accordion-chevron" id="chevron-sessionMgmt">▼</span>
          </button>
          <div class="accordion-content" id="content-sessionMgmt">
            <button class="tray-btn" onclick="createNotesPanel()">
              <span class="icon">📝</span> Session Notes
            </button>
            <button class="tray-btn" onclick="createCampaignTrackerPanel()">
              <span class="icon">📈</span> Campaign Tracker
            </button>
            <button class="tray-btn" onclick="createTimelinePanel()">
              <span class="icon">📅</span> Timeline Tracker
            </button>
            <button class="tray-btn" onclick="createReputationPanel()">
              <span class="icon">⭐</span> Reputation Tracker
            </button>
          </div>
        </div>

        <!-- AI Assistance Accordion -->
        <div class="accordion-section">
          <button class="accordion-header" onclick="toggleAccordion('aiAssistance')">
            <span class="accordion-icon">🤖</span>
            <span class="accordion-title">AI Assistance</span>
            <span class="accordion-chevron" id="chevron-aiAssistance">▼</span>
          </button>
          <div class="accordion-content" id="content-aiAssistance">
            <button class="tray-btn" onclick="createAIAssistantPanel()">
              <span class="icon">🤖</span> AI GM Assistant
            </button>
            <button class="tray-btn" onclick="createPlotHookPanel()">
              <span class="icon">🎭</span> Plot Hook Generator
            </button>
            <button class="tray-btn" onclick="createRandomTablesPanel()">
              <span class="icon">🎰</span> Random Tables
            </button>
          </div>
        </div>

        <!-- Panel Management Accordion -->
        <div class="accordion-section">
          <button class="accordion-header" onclick="toggleAccordion('panelMgmt')">
            <span class="accordion-icon">⚙️</span>
            <span class="accordion-title">Panel Management</span>
            <span class="accordion-chevron" id="chevron-panelMgmt">▼</span>
          </button>
          <div class="accordion-content" id="content-panelMgmt">
            <button class="tray-btn" onclick="createAllPanels()">
              <span class="icon">⊕</span> Create All Panels
            </button>
            <button class="tray-btn" onclick="fitPanelsToScreen()">
              <span class="icon">⊞</span> Arrange Panels
            </button>
            <button class="tray-btn" onclick="minimizeAllPanels()">
              <span class="icon">⊖</span> Minimize All Panels
            </button>
            <button class="tray-btn" onclick="restoreAllPanels()">
              <span class="icon">⊗</span> Restore All Panels
            </button>
            <button class="tray-btn danger" onclick="clearAllPanels()" style="border-color: var(--danger); color: var(--danger);">
              <span class="icon">×</span> Clear All Panels
            </button>
          </div>
        </div>


      </div>
    </div>
  </aside>

  <!-- Main Container -->
  <div class="main-container">
    <!-- Panel Container -->
    <div class="panel-container"></div>
    
    <!-- Minimized Panel Bar -->
    <div class="minimized-panel-bar" id="minimizedPanelBar" style="display: none;">
      <div class="minimized-panels-container" id="minimizedPanels"></div>
    </div>
  </div>
  
  <!-- Mobile Panel Navigation -->
  <nav class="mobile-panel-nav" id="mobilePanelNav">
    <div class="mobile-panel-tabs" id="mobilePanelTabs">
      <!-- Tabs will be dynamically added here -->
    </div>
  </nav>
  
  <!-- Mobile Add Panel Button -->
  <button class="mobile-add-panel" id="mobileAddPanel" onclick="toggleSideTray()">
    <span>+</span>
  </button>
  
  <!-- Save Indicator -->
  <div class="save-indicator" id="saveIndicator">Data Saved</div>
  
  <!-- Help Button -->
  <button class="help-button" onclick="window.helpSystem.showHelp()" title="Help & Tutorials">
    ?
  </button>
  
  <!-- Footer -->
  <footer class="app-footer" id="appFooter">
    <div class="footer-content">
      <span class="footer-text">Cyberpunk GM Screen © 2025 | Built for Night City Game Masters</span>
      <span class="footer-separator">|</span>
      <span class="footer-text">Powered by Web Components & Modern CSS</span>
    </div>
  </footer>
  
  <!-- Audio Preload -->
  <audio id="diceRollSound" preload="auto">
    <source src="data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBiuBzvLZiTYIG2m98OScTgwOUarm7blmFgU7k9n1unEiBC13yO/eizEIHWq+8+OWT" type="audio/wav">
  </audio>
  <audio id="criticalSound" preload="auto">
    <source src="data:audio/wav;base64,UklGRqQEAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YYAEAABQ/1r/Vv9a/1X/W/9U/1z/U/9d/1L/Xv9R/1//UP9g/0//Yf9O/2L/Tf9j/0z/ZP9L/2X/Sv9m/0n/Z/9I/2j/R/9p/0b/av9F/2v/RP9s/0P/bf9C/27/Qf9v/0D/cP8//3H/Pv9y/z3/c/88/3T/O/91/zr/dv85/3f/OP94/zf/ef82/3r/Nf97/zT/fP8z/33/Mv9+/zH/f/8w/4D/L/+B/y7/gv8t/4P/LP+E/yv/hf8q/4b/Kf+H/yj/iP8n/4n/Jv+K/yX/i/8k/4z/I/+N/yL/jv8h/4//IP+Q/x//kf8e/5L/Hf+T/xz/lP8b/5X/Gv+W/xn/l/8Y/5j/F/+Z/xb/mv8V/5v/FP+c/xP/nf8S/57/Ef+f/xD/oP8P/6H/Dv+i/w3/o/8M/6T/C/+l/wr/pv8J/6f/CP+o/wf/qf8G/6r/Bf+r/wT/rP8D/63/Av+u/wH/r/8A/7D/AP+x/wD/sv8A/7P/AP+0/wD/tf8A/7b/AP+3/wD/uP8A/7n/AP+6/wD/u/8A/7z/AP+9/wD/vv8A/7//AP/A/wD/wf8A/8L/AP/D/wD/xP8A/8X/AP/G/wD/x/8A/8j/AP/J/wD/yv8A/8v/AP/M/wD/zf8A/87/AP/P/wD/0P8A/9H/AP/S/wD/0/8A/9T/AP/V/wD/1v8A/9f/AP/Y/wD/2f8A/9r/AP/b/wD/3P8A/93/AP/e/wD/3/8A/+D/AP/h/wD/4v8A/+P/AP/k/wD/5f8A/+b/AP/n/wD/6P8A/+n/AP/q/wD/6/8A/+z/AP/t/wD/7v8A/+//AP/w/wD/8f8A//L/AP/z/wD/9P8A//X/AP/2/wD/9/8A//j/AP/5/wD/+v8A//v/AP/8/wD//f8A//7/AP///wD/AABhAGEAYQBhAGEAYQBhAGEAYQBhAGEAYQBhAGEAYQBhAGEAYQBhAGEAYQBhAGEAYQBhAGEAYQBhAGEAYQBhAGEA" type="audio/wav">
  </audio>
  <audio id="combatHitSound" preload="auto">
    <source src="data:audio/wav;base64,UklGRjQDAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YRADAAD/fwCAAIAAgP9/AIAAgACA/38AgACAAID/fwCAAIAAgP9/AIAAgACA/38AgACAAID/fwCAAIAAgP9/AIAAgACA/38AgACAAID/fwCAAIAAgP9/AID/fwCAAIAAgP9//38AgACAAIAAgP9/AIAAgACA/38AgACAAID/fwCAAIAAgP9/AIAAgACA/38AgACAAID/fwCAAIAAgP9/AIAAgACA/38AgACAAID/fwCAAIAAgP9/AIAAgACA" type="audio/wav">
  </audio>
  
  <!-- Scripts -->
  <script src="src/js/cyberpunk-background.js"></script>
  <script src="src/js/theme-manager.js"></script>
  <script src="src/js/enhanced-panel-system-fixed.js"></script>
  <script src="src/components/holo-button.js"></script>
  <script src="src/components/neon-input.js"></script>
  <script src="src/components/glitch-text.js"></script>
  <script src="src/components/cyber-card.js"></script>
  <script src="src/components/data-table.js"></script>
  <script src="src/components/loading-spinner.js"></script>
  <script src="src/components/error-message.js"></script>
  <script src="src/js/enhanced-dice-roller-fixed.js"></script>
  <script src="src/js/compact-dice-roller.js?v=3"></script>
  <script src="src/js/advanced-combat-tracker-fixed.js"></script>
  <script src="src/js/npc-generator.js"></script>
  <script src="src/js/enhanced-npc-generator.js"></script>
  <script src="src/js/rules-reference.js"></script>
  <script src="src/js/enhanced-rules-reference.js"></script>
  <script src="src/js/location-generator-implementation.js"></script>
  <script src="src/js/enhanced-location-generator.js"></script>
  <script src="src/js/encounter-generator-advanced.js"></script>
  <script src="src/js/encounter-panel-advanced.js"></script>
  <script src="src/js/encounter-panel-simple.js"></script>
  <script src="src/js/netrunning-interface.js"></script>
  <script src="src/js/netrunning-advanced.js"></script>
  <script src="src/js/netrunning-enhanced.js"></script>
  <script src="src/js/enhanced-lore-database.js"></script>
  <script src="src/js/enhanced-sound-system.js"></script>
  <script src="src/js/enhanced-performance-monitor.js"></script>
  <script src="src/js/virtual-scroll.js"></script>
  <script src="src/js/collaboration-system.js"></script>
  <script src="src/js/atmosphere-system.js"></script>
  <script src="src/js/ai-gm-assistant.js"></script>
  <script src="src/js/campaign-tracker.js"></script>
  <script src="src/js/panel-utils.js"></script>
  <script src="src/js/notes-text-editor.js"></script>
  <script src="src/js/notes-filesystem-manager.js"></script>
  <script src="src/js/module-index.js"></script>
  <script src="src/js/panel-templates.js"></script>
  <script src="src/js/help-system.js"></script>
  <script src="src/js/campaign-manager.js"></script>
  <script src="src/js/performance-optimizer.js"></script>
  <script src="src/js/comprehensive-rules-reference.js"></script>
  <script src="src/js/panel-implementations-fixed.js"></script>
  
  <script>
    // Initialize systems on page load
    let background;
    let themeManager;
    let panelSystem;
    
    window.addEventListener('DOMContentLoaded', () => {
      console.log('🎯 Initializing Cyberpunk GM Screen...');
      
      try {
        // Initialize animated background
        background = new CyberpunkBackground({
          circuits: true,
          rain: false,
          neonPulse: true,
          glitch: false,
          performance: 'high'
        });
        
        // Make background globally accessible
        window.background = background;
        
        // Initialize theme manager
        themeManager = new ThemeManager();
        window.themeManager = themeManager;
        
        // Clear corrupted panel data if needed
        try {
          const saved = localStorage.getItem('cyberpunk-panel-layout');
          if (saved) {
            const layout = JSON.parse(saved);
            // Check if any panel has object content
            if (layout.panels && layout.panels.some(p => typeof p.content === 'object')) {
              console.log('🔧 Clearing corrupted panel data...');
              localStorage.removeItem('cyberpunk-panel-layout');
            }
          }
        } catch (e) {
          console.log('🔧 Clearing invalid panel data...');
          localStorage.removeItem('cyberpunk-panel-layout');
        }
        
        // Initialize panel system
        panelSystem = new EnhancedPanelSystem({
          container: document.querySelector('.panel-container'),
          enableDocking: false,
          enableTabbing: true,
          enablePersistence: true
        });
        
        // Make panel system globally accessible
        window.panelSystem = panelSystem;
        
        // Set header height CSS variable
        const header = document.getElementById('appHeader');
        if (header) {
          const headerHeight = header.offsetHeight;
          document.documentElement.style.setProperty('--header-height', headerHeight + 'px');
          console.log('📏 Header height:', headerHeight + 'px');
        }
        
        console.log('✅ All systems initialized successfully!');
        console.log('💡 Click the menu button (☰) to create panels');
        
        // Check if first time user
        if (window.helpSystem) {
          window.helpSystem.checkFirstTime();
        }
        
        // Listen for add-npc-to-combat events
        document.addEventListener('add-npc-to-combat', (event) => {
          const npcData = event.detail;
          
          // Find an open combat tracker
          const panels = Array.from(window.panelSystem.panels.values());
          const combatPanel = panels.find(p => p.title.includes('Combat Tracker'));
          
          if (combatPanel) {
            // Find the combat tracker instance
            const container = combatPanel.content.querySelector('[id^="combat-tracker-"]');
            if (container && container.combatTracker) {
              // Add the NPC to combat
              const tracker = container.combatTracker;
              const nameInput = container.querySelector('#combatant-name');
              const refInput = container.querySelector('#combatant-ref');
              const hpInput = container.querySelector('#combatant-hp');
              const bodyArmorInput = container.querySelector('#combatant-body-armor');
              const headArmorInput = container.querySelector('#combatant-head-armor');
              const typeSelect = container.querySelector('#combatant-type');
              
              if (nameInput && refInput && hpInput && bodyArmorInput && headArmorInput && typeSelect) {
                nameInput.value = npcData.name;
                refInput.value = npcData.ref;
                hpInput.value = npcData.hp;
                bodyArmorInput.value = npcData.bodyArmor;
                headArmorInput.value = npcData.headArmor;
                typeSelect.value = npcData.type;
                
                // Trigger the add button
                const addBtn = container.querySelector('#add-combatant');
                if (addBtn) addBtn.click();
              }
            }
          } else {
            alert('Please open a Combat Tracker panel first');
          }
        });
        
      } catch (error) {
        console.error('❌ Error during initialization:', error);
      }
    });
    
    // Panel creation functions
    function createDicePanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      const uniqueId = `dice-roller-${Date.now()}`;
      const panel = window.panelSystem.createPanel({
        title: 'DICE.SYS v2.1',
        content: `<div id="${uniqueId}" style="height: 100%; overflow: auto; background: rgba(0,0,0,0.9);"></div>`,
        position: { x: 320, y: 80 },
        size: { width: 320, height: 420 }
      });
      
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container && typeof CompactDiceRoller === 'function') {
          new CompactDiceRoller(container);
          
          // Override cached styles with inline styles
          const style = document.createElement('style');
          style.textContent = `
            #${uniqueId} .compact-dice-roller::before {
              display: none !important;
            }
            
            #${uniqueId} .compact-dice-roller {
              background: #1a1a1a !important;
              border: 2px solid #0ff !important;
              box-shadow: 0 0 20px rgba(0, 255, 255, 0.3) !important;
            }
            
            #${uniqueId} .quick-dice-btn {
              background: #2a2a2a !important;
              background: linear-gradient(180deg, #3a3a3a 0%, #2a2a2a 100%) !important;
              border: 2px solid #0ff !important;
              color: #0ff !important;
              padding: 10px 6px !important;
              font-size: 13px !important;
              font-weight: bold !important;
              box-shadow: 
                0 4px 8px rgba(0, 0, 0, 0.5),
                0 2px 4px rgba(0, 0, 0, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.2) !important;
              text-shadow: 0 0 5px rgba(0, 255, 255, 0.5) !important;
            }
            
            #${uniqueId} .quick-dice-btn:hover {
              background: #0ff !important;
              color: #000 !important;
              box-shadow: 
                0 0 20px rgba(0, 255, 255, 0.8),
                0 4px 8px rgba(0, 0, 0, 0.5) !important;
              transform: translateY(-2px) !important;
              text-shadow: none !important;
            }
            
            #${uniqueId} .quick-dice-btn.exploding {
              background: linear-gradient(180deg, #3a2a3a 0%, #2a1a2a 100%) !important;
              color: #ff0080 !important;
              border-color: #ff0080 !important;
              text-shadow: 0 0 5px rgba(255, 0, 128, 0.8) !important;
            }
            
            #${uniqueId} .skill-check-compact {
              background: #1a1a1a !important;
              border: 2px solid #0ff !important;
              box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5) !important;
            }
            
            #${uniqueId} .mini-input {
              background: #2a2a2a !important;
              border: 1px solid #0ff !important;
              color: #0ff !important;
              font-weight: bold !important;
            }
            
            #${uniqueId} .mod-btn {
              background: #2a2a2a !important;
              border: 1px solid #0ff !important;
              color: #0ff !important;
              font-weight: bold !important;
              box-shadow: 0 2px 4px rgba(0, 0, 0, 0.5) !important;
            }
            
            #${uniqueId} .mod-btn.active {
              background: #0ff !important;
              color: #000 !important;
              box-shadow: 0 0 10px rgba(0, 255, 255, 0.8) !important;
            }
            
            #${uniqueId} .roll-action-btn {
              background: linear-gradient(180deg, #0ff 0%, #0aa 100%) !important;
              border: 2px solid #0ff !important;
              color: #000 !important;
              font-weight: bold !important;
              box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5) !important;
            }
            
            #${uniqueId} .result-display {
              background: #000 !important;
              border: 2px solid #00ff41 !important;
              box-shadow: 
                0 0 10px rgba(0, 255, 65, 0.5),
                inset 0 0 10px rgba(0, 255, 65, 0.1) !important;
            }
            
            #${uniqueId} .result-display::before {
              display: none !important;
            }
            
            #${uniqueId} .special-btn {
              background: #2a2a2a !important;
              border: 2px solid #0aa !important;
              color: #0aa !important;
              font-weight: bold !important;
              box-shadow: 0 2px 4px rgba(0, 0, 0, 0.5) !important;
            }
            
            #${uniqueId} .special-btn:hover {
              background: #0aa !important;
              color: #000 !important;
              box-shadow: 0 0 10px rgba(0, 170, 170, 0.8) !important;
            }
          `;
          container.appendChild(style);
        }
      }, 100);
    }
    
    function createCombatPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      const uniqueId = `combat-tracker-${Date.now()}`;
      const panel = window.panelSystem.createPanel({
        title: 'Advanced Combat Tracker',
        content: `<div id="${uniqueId}" style="height: 100%; overflow: auto;"></div>`,
        position: { x: 520, y: 80 },
        size: { width: 600, height: 500 }
      });
      
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container) {
          const tracker = new CyberpunkCombatTracker(container);
          container.combatTracker = tracker;
          window.combatTracker = tracker;
        }
      }, 100);
    }
    
    function createNotesPanel() {
      // Use the enhanced notes panel if available
      if (window.createEnhancedNotesPanel) {
        window.createEnhancedNotesPanel();
        return;
      }
      
      // Fallback to basic notes panel
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      window.panelSystem.createPanel({
        title: 'Session Notes',
        content: `
          <div class="notes-panel">
            <textarea id="notesArea" style="width: 100%; height: 300px; background: var(--bg-surface); border: 1px solid var(--border-color); color: var(--text-primary); padding: 10px; font-family: var(--font-secondary); resize: vertical;" placeholder="Type your notes here..."></textarea>
            <div style="margin-top: 10px; display: flex; justify-content: space-between;">
              <button onclick="saveNotes()" style="padding: 8px 16px; background: var(--bg-surface); border: 1px solid var(--success); color: var(--success); cursor: pointer;">Save</button>
              <button onclick="clearNotes()" style="padding: 8px 16px; background: var(--bg-surface); border: 1px solid var(--danger); color: var(--danger); cursor: pointer;">Clear</button>
            </div>
          </div>
        `,
        position: { x: 320, y: 150 },
        size: { width: 350, height: 350 }
      });
      
      // Load saved notes and setup auto-save
      setTimeout(() => {
        loadNotes();
        setupNotesAutoSave();
      }, 100);
    }
    
    function createNPCPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = `enhanced-npc-generator-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Enhanced NPC Generator',
        content: `<div id="${uniqueId}" style="height: 100%; overflow: auto;"></div>`,
        position: { x: 100, y: 100 },
        size: { width: 600, height: 700 }
      });
      
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container) {
          const npcGenerator = new EnhancedNPCGenerator(container);
          container.npcGenerator = npcGenerator;
          
          // Store reference for saved NPC methods
          container.loadNPC = (index) => npcGenerator.loadNPC(index);
          container.deleteNPC = (index) => npcGenerator.deleteNPC(index);
        }
      }, 100);
    }
    
    function createRulesPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = `enhanced-rules-reference-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Enhanced Rules Reference',
        content: `<div id="${uniqueId}" style="height: 100%; overflow: hidden;"></div>`,
        position: { x: 320, y: 150 },
        size: { width: 600, height: 700 }
      });
      
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container) {
          const rulesReference = new EnhancedRulesReference(container);
          container.rulesReference = rulesReference;
          
          // Store reference for HTML onclick handlers
          container.toggleRule = (ruleId) => rulesReference.toggleRule(ruleId);
          container.toggleBookmark = (ruleId) => rulesReference.toggleBookmark(ruleId);
          container.copyRule = (ruleId) => rulesReference.copyRule(ruleId);
          container.jumpToRule = (ruleId) => rulesReference.jumpToRule(ruleId);
        }
      }, 100);
    }
    
    function createRulesReferencePanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = `comprehensive-rules-reference-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Comprehensive Rules Reference',
        content: `<div id="${uniqueId}" style="height: 100%; overflow: hidden;"><comprehensive-rules-reference></comprehensive-rules-reference></div>`,
        position: { x: 250, y: 100 },
        size: { width: 800, height: 750 }
      });
      
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container) {
          // Enable wiki-style linking between rules and lore
          container.addEventListener('click', function(e) {
            if (e.target.getAttribute('onclick')?.includes('loadLoreArticle')) {
              e.preventDefault();
              const articleId = e.target.getAttribute('onclick').match(/'([^']+)'/)[1];
              createLoreDatabasePanel(articleId);
            }
          });
        }
      }, 100);
    }
    
    function createLocationPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = `location-generator-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Location Generator',
        content: `
          <div id="${uniqueId}" class="location-generator" style="height: 100%; overflow: auto; padding: 20px;">
            <div class="location-controls">
              <div class="control-row">
                <select class="location-type" style="flex: 1; padding: 10px; background: var(--bg-surface); 
                        border: 1px solid var(--border-color); color: var(--text-primary); margin-right: 10px;">
                  <option value="random">Random Location</option>
                  <option value="bar">Bar/Nightclub</option>
                  <option value="shop">Shop/Store</option>
                  <option value="corp">Corporate Office</option>
                  <option value="apartment">Apartment Complex</option>
                  <option value="warehouse">Warehouse</option>
                  <option value="gang">Gang Territory</option>
                  <option value="restaurant">Restaurant/Food</option>
                  <option value="clinic">Clinic/Medical</option>
                  <option value="government">Government Building</option>
                  <option value="tech">Tech/Workshop</option>
                </select>
                <select class="location-district" style="flex: 1; padding: 10px; background: var(--bg-surface); 
                        border: 1px solid var(--border-color); color: var(--text-primary);">
                  <option value="random">Random District</option>
                  <option value="watson">Watson</option>
                  <option value="westbrook">Westbrook</option>
                  <option value="heywood">Heywood</option>
                  <option value="pacifica">Pacifica</option>
                  <option value="santo-domingo">Santo Domingo</option>
                  <option value="city-center">City Center</option>
                </select>
              </div>
              <div class="control-row" style="margin: 10px 0; display: flex; gap: 20px;">
                <label style="display: flex; align-items: center; color: var(--text-secondary);">
                  <input type="checkbox" class="include-npcs" checked style="margin-right: 5px;"> Include NPCs
                </label>
                <label style="display: flex; align-items: center; color: var(--text-secondary);">
                  <input type="checkbox" class="include-hooks" checked style="margin-right: 5px;"> Include Plot Hooks
                </label>
                <label style="display: flex; align-items: center; color: var(--text-secondary);">
                  <input type="checkbox" class="include-threats" checked style="margin-right: 5px;"> Include Threats
                </label>
              </div>
              <div class="control-row" style="display: flex; gap: 10px;">
                <holo-button class="generate-location-btn" variant="primary">Generate Location</holo-button>
                <holo-button class="save-location-btn" variant="success" disabled>Save Location</holo-button>
              </div>
            </div>
            
            <div class="location-display" style="margin-top: 20px;">
              <div class="location-tabs" style="display: flex; gap: 10px; margin-bottom: 10px;">
                <button class="location-tab active" data-tab="details" 
                        style="padding: 8px 16px; background: var(--primary); border: none; 
                               color: var(--bg-primary); cursor: pointer;">Details</button>
                <button class="location-tab" data-tab="saved" 
                        style="padding: 8px 16px; background: var(--bg-surface); 
                               border: 1px solid var(--border-color); color: var(--text-primary); 
                               cursor: pointer;">Saved Locations</button>
                <button class="location-tab" data-tab="map" 
                        style="padding: 8px 16px; background: var(--bg-surface); 
                               border: 1px solid var(--border-color); color: var(--text-primary); 
                               cursor: pointer;">District Map</button>
              </div>
              
              <div class="location-tab-content" data-content="details">
                <div class="location-container" style="background: var(--bg-surface); 
                     border: 1px solid var(--border-color); padding: 20px; border-radius: 4px;">
                  <div class="location-placeholder" style="text-align: center; 
                       color: var(--text-secondary); padding: 40px;">
                    Click "Generate Location" to create a new location
                  </div>
                </div>
              </div>
              
              <div class="location-tab-content" data-content="saved" style="display: none;">
                <div class="location-list" style="background: var(--bg-surface); 
                     border: 1px solid var(--border-color); padding: 20px; border-radius: 4px; 
                     min-height: 200px;">
                  <div style="text-align: center; color: var(--text-secondary);">
                    No saved locations yet
                  </div>
                </div>
              </div>
              
              <div class="location-tab-content" data-content="map" style="display: none;">
                <div class="night-city-map" style="background: var(--bg-surface); 
                     border: 1px solid var(--border-color); padding: 20px; border-radius: 4px; 
                     text-align: center; color: var(--text-secondary);">
                  <div style="padding: 40px;">Night City district map coming soon...</div>
                </div>
              </div>
            </div>
          </div>
        `,
        position: { x: 320, y: 100 },
        size: { width: 550, height: 650 }
      });
      
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container && typeof EnhancedLocationGenerator === 'function') {
          const enhancedLocationGenerator = new EnhancedLocationGenerator(container);
          container.enhancedLocationGenerator = enhancedLocationGenerator;
        }
      }, 100);
    }
    
    function createMapPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      // Check if the panel creation function from panel-implementations-fixed.js is available
      if (window.createMapPanel && typeof window.createMapPanel === 'function' && window.createMapPanel !== createMapPanel) {
        // Use the implementation from panel-implementations-fixed.js
        window.createMapPanel();
      } else {
        // Fallback implementation
        const uniqueId = `night-city-map-${Date.now()}`;
        window.panelSystem.createPanel({
          title: 'Night City Map',
          content: `<div id="${uniqueId}" class="night-city-map-panel" style="height: 100%; overflow: hidden;"></div>`,
          position: { x: 320, y: 50 },
          size: { width: 900, height: 750 }
        });
        
        setTimeout(() => {
          const container = document.getElementById(uniqueId);
          if (container && window.nightCityMap && window.nightCityMap.createMapPanel) {
            const mapContent = window.nightCityMap.createMapPanel();
            container.appendChild(mapContent);
          } else {
            container.innerHTML = `
              <div style="padding: 20px; text-align: center; color: var(--text-secondary);">
                <p>Loading Night City Map...</p>
                <p style="font-size: 0.9em;">Make sure night-city-map.js is loaded.</p>
              </div>
            `;
          }
        }, 100);
      }
    }
    
    function createLoreBrowserPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = `lore-database-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Lore Database',
        content: `<div id="${uniqueId}" class="lore-database-container" style="height: 100%; overflow: hidden;"></div>`,
        position: { x: 320, y: 150 },
        size: { width: 800, height: 600 }
      });
      
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container && typeof EnhancedLoreDatabase === 'function') {
          const loreDatabase = new EnhancedLoreDatabase(container);
          container.loreDatabase = loreDatabase;
        }
      }, 100);
    }
    
    function createDebugPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = `debug-panel-${Date.now()}`;
      const panel = window.panelSystem.createPanel({
        title: 'Debug Tools',
        content: `<div id="${uniqueId}" style="height: 100%; overflow: auto; background: rgba(0,0,0,0.8); color: #0ff;">
          <style>
            #${uniqueId} .debug-tabs {
              display: flex;
              background: rgba(0,0,0,0.5);
              border-bottom: 2px solid #0ff;
              padding: 0;
            }
            #${uniqueId} .debug-tab {
              padding: 10px 20px;
              background: none;
              border: none;
              color: #0ff;
              cursor: pointer;
              font-family: var(--font-mono);
              border-bottom: 2px solid transparent;
              transition: all 0.3s;
            }
            #${uniqueId} .debug-tab:hover {
              background: rgba(0,255,255,0.1);
            }
            #${uniqueId} .debug-tab.active {
              border-bottom-color: #0ff;
              background: rgba(0,255,255,0.2);
            }
            #${uniqueId} .debug-tab-content {
              padding: 20px;
            }
            #${uniqueId} .debug-info-grid {
              display: grid;
              gap: 10px;
              margin-bottom: 20px;
            }
            #${uniqueId} .debug-info-row {
              display: grid;
              grid-template-columns: 150px 1fr;
              gap: 10px;
              padding: 5px;
              background: rgba(0,255,255,0.05);
              border: 1px solid rgba(0,255,255,0.2);
              font-size: 12px;
            }
            #${uniqueId} .debug-info-label {
              color: #0ff;
              font-weight: bold;
            }
            #${uniqueId} .debug-info-value {
              color: #fff;
              word-break: break-all;
              font-family: var(--font-mono);
            }
            #${uniqueId} .debug-tools button {
              padding: 8px 16px;
              margin: 5px;
              background: rgba(0,255,255,0.2);
              border: 1px solid #0ff;
              color: #0ff;
              cursor: pointer;
              font-family: var(--font-mono);
              transition: all 0.3s;
            }
            #${uniqueId} .debug-tools button:hover {
              background: rgba(0,255,255,0.3);
              box-shadow: 0 0 10px #0ff;
            }
            #${uniqueId} .console-output {
              background: #000;
              border: 1px solid #0ff;
              padding: 10px;
              height: 200px;
              overflow-y: auto;
              font-family: var(--font-mono);
              font-size: 12px;
            }
            #${uniqueId} .console-entry {
              margin-bottom: 5px;
              padding: 2px 5px;
            }
            #${uniqueId} .console-entry.error {
              color: #f00;
              background: rgba(255,0,0,0.1);
            }
            #${uniqueId} .console-entry.warn {
              color: #ff0;
              background: rgba(255,255,0,0.1);
            }
            #${uniqueId} .console-entry.info {
              color: #0ff;
            }
          </style>
          
          <div class="debug-tabs">
            <button class="debug-tab active" data-tab="system">System Info</button>
            <button class="debug-tab" data-tab="panels">Panel Debug</button>
            <button class="debug-tab" data-tab="storage">Storage</button>
            <button class="debug-tab" data-tab="console">Console</button>
          </div>
          
          <div class="debug-tab-content" id="${uniqueId}-system">
            <h3>System Information</h3>
            <div class="debug-info-grid">
              <div class="debug-info-row">
                <div class="debug-info-label">User Agent:</div>
                <div class="debug-info-value">${navigator.userAgent}</div>
              </div>
              <div class="debug-info-row">
                <div class="debug-info-label">Window Size:</div>
                <div class="debug-info-value" id="${uniqueId}-window-size">${window.innerWidth}px × ${window.innerHeight}px</div>
              </div>
              <div class="debug-info-row">
                <div class="debug-info-label">Pixel Ratio:</div>
                <div class="debug-info-value">${window.devicePixelRatio}</div>
              </div>
              <div class="debug-info-row">
                <div class="debug-info-label">Theme:</div>
                <div class="debug-info-value" id="${uniqueId}-theme">${document.body.getAttribute('data-theme') || 'default'}</div>
              </div>
              <div class="debug-info-row">
                <div class="debug-info-label">Document State:</div>
                <div class="debug-info-value">${document.readyState}</div>
              </div>
              <div class="debug-info-row">
                <div class="debug-info-label">Performance Mode:</div>
                <div class="debug-info-value" id="${uniqueId}-perf-mode">${window.performanceOptimizer?.performanceMode || 'N/A'}</div>
              </div>
              <div class="debug-info-row">
                <div class="debug-info-label">Memory Usage:</div>
                <div class="debug-info-value" id="${uniqueId}-memory">N/A</div>
              </div>
            </div>
            <div class="debug-tools">
              <button id="${uniqueId}-refresh-info">Refresh Info</button>
              <button id="${uniqueId}-check-functions">Check Core Functions</button>
            </div>
          </div>
          
          <div class="debug-tab-content" id="${uniqueId}-panels" style="display:none;">
            <h3>Panel Debugging</h3>
            <div class="debug-info-grid">
              <div class="debug-info-row">
                <div class="debug-info-label">Active Panels:</div>
                <div class="debug-info-value" id="${uniqueId}-active-panels">0</div>
              </div>
              <div class="debug-info-row">
                <div class="debug-info-label">Z-Index Range:</div>
                <div class="debug-info-value" id="${uniqueId}-z-index-range">N/A</div>
              </div>
            </div>
            <div class="debug-tools">
              <button id="${uniqueId}-list-panels">List All Panels</button>
              <button id="${uniqueId}-reset-positions">Reset Positions</button>
              <button id="${uniqueId}-check-overlaps">Check Overlaps</button>
            </div>
          </div>
          
          <div class="debug-tab-content" id="${uniqueId}-storage" style="display:none;">
            <h3>Local Storage</h3>
            <div class="debug-info-grid" id="${uniqueId}-storage-list">
              <!-- Storage items will be populated here -->
            </div>
            <div class="debug-tools">
              <button id="${uniqueId}-refresh-storage">Refresh</button>
              <button id="${uniqueId}-clear-storage">Clear All Storage</button>
              <button id="${uniqueId}-export-storage">Export Storage</button>
            </div>
          </div>
          
          <div class="debug-tab-content" id="${uniqueId}-console" style="display:none;">
            <h3>Console Output</h3>
            <div class="console-output" id="${uniqueId}-console-output">
              <div class="console-entry info">Console initialized...</div>
            </div>
            <div class="debug-tools">
              <button id="${uniqueId}-clear-console">Clear Console</button>
              <button id="${uniqueId}-export-logs">Export Logs</button>
            </div>
          </div>
        </div>`,
        position: { x: 100, y: 100 },
        size: { width: 600, height: 500 }
      });
      
      // Initialize debug panel functionality after creation
      setTimeout(() => {
        initializeDebugPanel(uniqueId);
      }, 100);
    }
    
    function createPerformancePanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = `performance-panel-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Performance Monitor',
        content: `<div id="${uniqueId}" class="performance-panel-container" style="height: 100%; overflow: auto;"></div>`,
        position: { x: 320, y: 200 },
        size: { width: 600, height: 500 }
      });
      
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container && window.performanceMonitor) {
          container.innerHTML = window.performanceMonitor.createPerformancePanel();
          window.performanceMonitor.attachPerformancePanelListeners(container);
          
          // Auto-refresh metrics every 2 seconds
          const refreshInterval = setInterval(() => {
            if (container.isConnected && window.performanceMonitor) {
              container.innerHTML = window.performanceMonitor.createPerformancePanel();
              window.performanceMonitor.attachPerformancePanelListeners(container);
            } else {
              clearInterval(refreshInterval);
            }
          }, 2000);
          
          container.refreshInterval = refreshInterval;
        }
      }, 100);
    }
    
    function createAllPanels() {
      const panels = [
        createDicePanel,
        createCombatPanel,
        createNotesPanel,
        createNPCPanel,
        createRulesPanel,
        createLocationPanel,
        createLoreBrowserPanel,
        createPerformancePanel,
        createAIAssistantPanel,
        createCampaignTrackerPanel
      ];
      
      // Create panels with staggered timing to avoid overwhelming the system
      panels.forEach((createFunc, index) => {
        setTimeout(() => {
          createFunc();
        }, index * 150);
      });
      
      // Fit all panels to screen after they're created
      setTimeout(() => fitPanelsToScreen(), panels.length * 150 + 200);
    }
    
    function fitPanelsToScreen() {
      if (window.panelSystem) {
        window.panelSystem.fitAllToScreen();
      }
    }
    
    function clearAllPanels() {
      if (window.panelSystem && confirm('Clear all panels? This will remove all current panels.')) {
        window.panelSystem.resetLayout();
      }
    }
    
    function minimizeAllPanels() {
      if (window.panelSystem) {
        window.panelSystem.minimizeAll();
      }
    }
    
    function restoreAllPanels() {
      if (!window.panelSystem) return;
      
      // Get all minimized panels and restore them
      window.panelSystem.panels.forEach(panel => {
        if (panel.state === 'minimized') {
          panel.restore();
        }
      });
    }
    
    function exportLayout() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      // Get the current layout
      const layout = {
        version: '1.0',
        timestamp: new Date().toISOString(),
        panels: Array.from(window.panelSystem.panels.values()).map(panel => ({
          id: panel.id,
          title: panel.title,
          position: panel.position,
          size: panel.size,
          state: panel.state,
          activeTab: panel.activeTab,
          content: panel.content,
          contentData: panel.getContentData(),
          preMinimizeState: window.panelSystem.minimizedPanels.get(panel.id) || null
        }))
      };
      
      // Convert to JSON
      const json = JSON.stringify(layout, null, 2);
      
      // Create blob and download link
      const blob = new Blob([json], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `cyberpunk-panel-layout-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      console.log('✅ Layout exported successfully');
    }
    
    function importLayout(event) {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const file = event.target.files[0];
      if (!file) return;
      
      const reader = new FileReader();
      reader.onload = function(e) {
        try {
          const layout = JSON.parse(e.target.result);
          
          // Validate layout structure
          if (!layout.panels || !Array.isArray(layout.panels)) {
            throw new Error('Invalid layout format');
          }
          
          // Clear existing panels
          if (confirm('This will replace all current panels. Continue?')) {
            clearAllPanels();
            
            // Recreate panels from layout
            layout.panels.forEach((panelData, index) => {
              let panel;
              
              // Determine panel type based on title or ID
              if (panelData.title.includes('Dice Roller')) {
                // Create dice panel with saved position/size
                const uniqueId = `dice-roller-${Date.now()}-${index}`;
                panel = window.panelSystem.createPanel({
                  title: 'Enhanced Dice Roller',
                  content: `<div id="${uniqueId}" style="height: 100%; overflow: auto;"></div>`,
                  position: panelData.position,
                  size: panelData.size,
                  state: 'normal' // Set to normal initially
                });
                
                // Initialize dice roller after a delay
                setTimeout(() => {
                  const diceRoller = new EnhancedDiceRoller(`#${uniqueId}`);
                  diceRoller.init();
                }, 100);
                
              } else if (panelData.title.includes('Combat Tracker')) {
                // Create combat panel with saved position/size
                const uniqueId = `combat-tracker-${Date.now()}-${index}`;
                panel = window.panelSystem.createPanel({
                  title: 'Advanced Combat Tracker',
                  content: `<div id="${uniqueId}" style="height: 100%; overflow: auto;"></div>`,
                  position: panelData.position,
                  size: panelData.size,
                  state: 'normal'
                });
                
                // Initialize combat tracker after a delay
                setTimeout(() => {
                  const combatTracker = new AdvancedCombatTracker(`#${uniqueId}`);
                  combatTracker.init();
                }, 100);
                
              } else if (panelData.title.includes('Session Notes')) {
                // Create notes panel with saved position/size
                const uniqueId = `notes-${Date.now()}-${index}`;
                panel = window.panelSystem.createPanel({
                  title: 'Session Notes',
                  content: `<div id="${uniqueId}" style="height: 100%; overflow: auto;"></div>`,
                  position: panelData.position,
                  size: panelData.size,
                  state: 'normal'
                });
                
                // Initialize notes editor after a delay
                setTimeout(() => {
                  const notesEditor = new NotesTextEditor(`#${uniqueId}`);
                  notesEditor.init();
                }, 100);
                
              } else {
                // Generic panel
                panel = window.panelSystem.createPanel({
                  title: panelData.title,
                  content: panelData.content || '',
                  position: panelData.position,
                  size: panelData.size,
                  state: 'normal',
                  activeTab: panelData.activeTab || 0
                });
              }
              
              // Restore minimized state if needed
              if (panelData.preMinimizeState) {
                window.panelSystem.minimizedPanels.set(panel.id, panelData.preMinimizeState);
              }
              
              // Apply saved state after panel is created
              if (panelData.state === 'minimized') {
                setTimeout(() => panel.minimize(), 150);
              } else if (panelData.state === 'maximized') {
                setTimeout(() => panel.maximize(), 150);
              }
            });
            
            console.log('✅ Layout imported successfully');
          }
        } catch (error) {
          console.error('Failed to import layout:', error);
          alert('Failed to import layout: ' + error.message);
        }
      };
      
      reader.readAsText(file);
      
      // Clear the file input
      event.target.value = '';
    }
    
    // Debug Panel Functions
    function initializeDebugPanel(uniqueId) {
      const container = document.getElementById(uniqueId);
      if (!container) return;
      
      // Tab switching
      const tabs = container.querySelectorAll('.debug-tab');
      const tabContents = container.querySelectorAll('.debug-tab-content');
      
      tabs.forEach(tab => {
        tab.addEventListener('click', () => {
          const targetTab = tab.getAttribute('data-tab');
          
          // Update active tab
          tabs.forEach(t => t.classList.remove('active'));
          tab.classList.add('active');
          
          // Show corresponding content
          tabContents.forEach(content => {
            if (content.id === `${uniqueId}-${targetTab}`) {
              content.style.display = 'block';
            } else {
              content.style.display = 'none';
            }
          });
        });
      });
      
      // System Info functions
      const refreshInfoBtn = document.getElementById(`${uniqueId}-refresh-info`);
      if (refreshInfoBtn) {
        refreshInfoBtn.addEventListener('click', () => {
          document.getElementById(`${uniqueId}-window-size`).textContent = 
            `${window.innerWidth}px × ${window.innerHeight}px`;
          document.getElementById(`${uniqueId}-theme`).textContent = 
            document.body.getAttribute('data-theme') || 'default';
          
          // Update performance stats
          if (window.performanceOptimizer) {
            const stats = window.performanceOptimizer.getStats();
            document.getElementById(`${uniqueId}-perf-mode`).textContent = stats.mode.toUpperCase();
            document.getElementById(`${uniqueId}-memory`).textContent = 
              typeof stats.memory === 'object' ? `${stats.memory.used} / ${stats.memory.total}` : 'N/A';
          }
        });
      }
      
      const checkFunctionsBtn = document.getElementById(`${uniqueId}-check-functions`);
      if (checkFunctionsBtn) {
        checkFunctionsBtn.addEventListener('click', () => {
          const functions = [
            { name: 'Panel System', check: () => window.panelSystem !== undefined },
            { name: 'Theme Manager', check: () => window.themeManager !== undefined },
            { name: 'Background', check: () => window.background !== undefined },
            { name: 'Dice Roller', check: () => typeof EnhancedDiceRoller !== 'undefined' },
            { name: 'Combat Tracker', check: () => typeof AdvancedCombatTracker !== 'undefined' },
            { name: 'Notes Editor', check: () => typeof NotesTextEditor !== 'undefined' }
          ];
          
          let results = functions.map(f => `${f.name}: ${f.check() ? '✓' : '✗'}`).join('\\n');
          alert('Core Functions Check:\\n\\n' + results);
        });
      }
      
      // Panel Debug functions
      const updatePanelInfo = () => {
        const panels = window.panelSystem ? Array.from(window.panelSystem.panels.values()) : [];
        document.getElementById(`${uniqueId}-active-panels`).textContent = panels.length;
        
        if (panels.length > 0) {
          const zIndexes = panels.map(p => parseInt(p.element.style.zIndex) || 0);
          const minZ = Math.min(...zIndexes);
          const maxZ = Math.max(...zIndexes);
          document.getElementById(`${uniqueId}-z-index-range`).textContent = `${minZ} - ${maxZ}`;
        } else {
          document.getElementById(`${uniqueId}-z-index-range`).textContent = 'N/A';
        }
      };
      
      // Update panel info initially and on tab switch
      updatePanelInfo();
      
      const listPanelsBtn = document.getElementById(`${uniqueId}-list-panels`);
      if (listPanelsBtn) {
        listPanelsBtn.addEventListener('click', () => {
          const panels = window.panelSystem ? Array.from(window.panelSystem.panels.values()) : [];
          const list = panels.map(p => 
            `${p.title} (${p.state}) - Pos: ${p.position.x},${p.position.y} - Size: ${p.size.width}x${p.size.height}`
          ).join('\\n');
          alert('Active Panels:\\n\\n' + (list || 'No panels active'));
        });
      }
      
      const resetPositionsBtn = document.getElementById(`${uniqueId}-reset-positions`);
      if (resetPositionsBtn) {
        resetPositionsBtn.addEventListener('click', () => {
          if (window.panelSystem && confirm('Reset all panel positions?')) {
            window.panelSystem.fitAllToScreen();
          }
        });
      }
      
      // Storage functions
      const refreshStorage = () => {
        const storageList = document.getElementById(`${uniqueId}-storage-list`);
        if (!storageList) return;
        
        storageList.innerHTML = '';
        
        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          const value = localStorage.getItem(key);
          const size = new Blob([value]).size;
          
          const row = document.createElement('div');
          row.className = 'debug-info-row';
          row.innerHTML = `
            <div class="debug-info-label">${key}:</div>
            <div class="debug-info-value">${size} bytes</div>
          `;
          storageList.appendChild(row);
        }
      };
      
      const refreshStorageBtn = document.getElementById(`${uniqueId}-refresh-storage`);
      if (refreshStorageBtn) {
        refreshStorageBtn.addEventListener('click', refreshStorage);
      }
      
      const clearStorageBtn = document.getElementById(`${uniqueId}-clear-storage`);
      if (clearStorageBtn) {
        clearStorageBtn.addEventListener('click', () => {
          if (confirm('Clear all local storage? This cannot be undone!')) {
            localStorage.clear();
            refreshStorage();
            alert('Local storage cleared');
          }
        });
      }
      
      const exportStorageBtn = document.getElementById(`${uniqueId}-export-storage`);
      if (exportStorageBtn) {
        exportStorageBtn.addEventListener('click', () => {
          const storage = {};
          for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            storage[key] = localStorage.getItem(key);
          }
          
          const blob = new Blob([JSON.stringify(storage, null, 2)], { type: 'application/json' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `localstorage-backup-${new Date().toISOString().split('T')[0]}.json`;
          a.click();
          URL.revokeObjectURL(url);
        });
      }
      
      // Console output
      const consoleOutput = document.getElementById(`${uniqueId}-console-output`);
      let consoleEntries = [];
      
      // Override console methods to capture output
      const originalLog = console.log;
      const originalError = console.error;
      const originalWarn = console.warn;
      
      const addConsoleEntry = (type, args) => {
        const entry = {
          type,
          message: Array.from(args).map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg) : String(arg)
          ).join(' '),
          timestamp: new Date().toLocaleTimeString()
        };
        
        consoleEntries.push(entry);
        
        if (consoleOutput) {
          const div = document.createElement('div');
          div.className = `console-entry ${type}`;
          div.textContent = `[${entry.timestamp}] ${entry.message}`;
          consoleOutput.appendChild(div);
          consoleOutput.scrollTop = consoleOutput.scrollHeight;
        }
      };
      
      console.log = function(...args) {
        originalLog.apply(console, args);
        addConsoleEntry('info', args);
      };
      
      console.error = function(...args) {
        originalError.apply(console, args);
        addConsoleEntry('error', args);
      };
      
      console.warn = function(...args) {
        originalWarn.apply(console, args);
        addConsoleEntry('warn', args);
      };
      
      const clearConsoleBtn = document.getElementById(`${uniqueId}-clear-console`);
      if (clearConsoleBtn) {
        clearConsoleBtn.addEventListener('click', () => {
          consoleEntries = [];
          consoleOutput.innerHTML = '<div class="console-entry info">Console cleared...</div>';
        });
      }
      
      const exportLogsBtn = document.getElementById(`${uniqueId}-export-logs`);
      if (exportLogsBtn) {
        exportLogsBtn.addEventListener('click', () => {
          const logs = consoleEntries.map(e => 
            `[${e.timestamp}] [${e.type.toUpperCase()}] ${e.message}`
          ).join('\\n');
          
          const blob = new Blob([logs], { type: 'text/plain' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `console-logs-${new Date().toISOString().split('T')[0]}.txt`;
          a.click();
          URL.revokeObjectURL(url);
        });
      }
    }
    
    // Side Tray Functions
    function toggleSideTray() {
      const tray = document.getElementById('sideTray');
      tray.classList.toggle('open');
    }
    
    // Accordion Functions
    function toggleAccordion(sectionId) {
      const content = document.getElementById(`content-${sectionId}`);
      const chevron = document.getElementById(`chevron-${sectionId}`);
      const header = document.querySelector(`button[onclick="toggleAccordion('${sectionId}')"]`);
      
      // Close all other accordions (optional - remove for multiple open support)
      document.querySelectorAll('.accordion-content').forEach(otherContent => {
        if (otherContent !== content && otherContent.classList.contains('expanded')) {
          otherContent.classList.remove('expanded');
          const otherId = otherContent.id.replace('content-', '');
          const otherChevron = document.getElementById(`chevron-${otherId}`);
          const otherHeader = document.querySelector(`button[onclick="toggleAccordion('${otherId}')"]`);
          if (otherChevron) otherChevron.classList.remove('rotated');
          if (otherHeader) otherHeader.classList.remove('active');
        }
      });
      
      // Toggle current accordion
      if (content && chevron && header) {
        const isExpanded = content.classList.contains('expanded');
        
        if (isExpanded) {
          content.classList.remove('expanded');
          chevron.classList.remove('rotated');
          header.classList.remove('active');
        } else {
          content.classList.add('expanded');
          chevron.classList.add('rotated');
          header.classList.add('active');
        }
      }
    }
    
    // Initialize accordions - expand Game Mechanics by default
    window.addEventListener('DOMContentLoaded', () => {
      setTimeout(() => {
        toggleAccordion('gameMechanics');
      }, 100);
    });
    
    function openThemeSelector() {
      const themes = ['cyberpunk', 'corpo', 'street-kid', 'nomad', 'netrunner'];
      const currentTheme = document.body.getAttribute('data-theme') || 'cyberpunk';
      
      const dialog = document.createElement('div');
      dialog.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: var(--bg-surface);
        border: 2px solid var(--border-color);
        padding: 20px;
        border-radius: 8px;
        z-index: 10002;
        min-width: 300px;
      `;
      
      dialog.innerHTML = `
        <h3 style="margin: 0 0 20px 0; color: var(--primary);">Select Theme</h3>
        ${themes.map(theme => `
          <button onclick="setTheme('${theme}'); this.parentElement.remove();" 
                  style="display: block; width: 100%; padding: 10px; margin-bottom: 10px;
                         background: ${theme === currentTheme ? 'var(--primary)' : 'var(--bg-overlay)'};
                         color: ${theme === currentTheme ? 'var(--bg-primary)' : 'var(--text-primary)'};
                         border: 1px solid var(--border-color); cursor: pointer; border-radius: 4px;">
            ${theme.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())}
          </button>
        `).join('')}
        <button onclick="this.parentElement.remove();" 
                style="width: 100%; padding: 10px; background: var(--bg-overlay);
                       color: var(--text-primary); border: 1px solid var(--danger);
                       cursor: pointer; border-radius: 4px; margin-top: 10px;">
          Cancel
        </button>
      `;
      
      document.body.appendChild(dialog);
    }
    
    function setTheme(theme) {
      if (window.themeManager) {
        window.themeManager.setTheme(theme);
      }
    }
    
    function togglePerformanceMode() {
      if (window.performanceOptimizer) {
        const currentMode = window.performanceOptimizer.performanceMode;
        const modes = ['low', 'medium', 'high'];
        const currentIndex = modes.indexOf(currentMode);
        const newMode = modes[(currentIndex + 1) % modes.length];
        
        window.performanceOptimizer.performanceMode = newMode;
        window.performanceOptimizer.applyOptimizations();
        
        const btn = event.target.closest('button');
        btn.innerHTML = `<span class="icon">⚡</span> Performance: ${newMode.toUpperCase()}`;
        
        // Update background if available
        if (window.background) {
          window.background.setPerformance(newMode);
        }
      }
    }
    
    // Notes functions
    function saveNotes() {
      const notes = document.getElementById('notesArea').value;
      localStorage.setItem('cyberpunk-session-notes', notes);
      
      const textarea = document.getElementById('notesArea');
      textarea.style.borderColor = 'var(--success)';
      setTimeout(() => {
        textarea.style.borderColor = 'var(--border-color)';
      }, 1000);
    }
    
    // Auto-save notes
    function setupNotesAutoSave() {
      const notesArea = document.getElementById('notesArea');
      if (!notesArea) return;
      
      let saveTimeout;
      notesArea.addEventListener('input', () => {
        clearTimeout(saveTimeout);
        saveTimeout = setTimeout(() => {
          saveNotes();
        }, 1000); // Auto-save after 1 second of no typing
      });
    }
    
    function loadNotes() {
      const saved = localStorage.getItem('cyberpunk-session-notes');
      if (saved && document.getElementById('notesArea')) {
        document.getElementById('notesArea').value = saved;
      }
    }
    
    function clearNotes() {
      if (confirm('Clear all notes?')) {
        document.getElementById('notesArea').value = '';
        localStorage.removeItem('cyberpunk-session-notes');
      }
    }
    
    // Template Functions
    function showTemplatesDialog() {
      const dialog = document.createElement('div');
      dialog.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: var(--bg-surface);
        border: 2px solid var(--primary);
        border-radius: 4px;
        padding: 20px;
        z-index: 10004;
        min-width: 400px;
        max-width: 600px;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0 0 30px rgba(0, 255, 255, 0.3);
      `;
      
      const templates = window.panelTemplates.getAllTemplates();
      
      dialog.innerHTML = `
        <h3 style="margin: 0 0 20px 0; color: var(--primary); text-transform: uppercase; 
                   font-size: 18px; letter-spacing: 1px;">Panel Templates</h3>
        <div style="display: grid; gap: 10px;">
          ${Object.entries(templates).map(([id, template]) => `
            <div style="display: flex; align-items: center; gap: 15px; padding: 15px;
                        background: var(--bg-overlay); border: 1px solid var(--border-color);
                        cursor: pointer; transition: all 0.2s;"
                 onmouseover="this.style.borderColor='var(--primary)'"
                 onmouseout="this.style.borderColor='var(--border-color)'"
                 onclick="applyTemplate('${id}'); this.parentElement.parentElement.remove();">
              <span style="font-size: 24px;">${template.icon}</span>
              <div style="flex: 1;">
                <div style="font-weight: bold; color: var(--primary); margin-bottom: 5px;">
                  ${template.name}
                </div>
                <div style="font-size: 12px; color: var(--text-secondary);">
                  ${template.description}
                </div>
              </div>
              ${id.startsWith('custom-') || id.startsWith('imported-') ? `
                <button onclick="event.stopPropagation(); deleteTemplate('${id}'); this.parentElement.remove();"
                        style="background: var(--danger); border: none; color: white;
                               padding: 5px 10px; cursor: pointer; font-size: 12px;">
                  Delete
                </button>
              ` : ''}
            </div>
          `).join('')}
        </div>
        <div style="margin-top: 20px; display: flex; justify-content: space-between;">
          <button onclick="document.getElementById('importTemplateFile').click();"
                  style="padding: 10px 20px; background: var(--bg-overlay);
                         border: 1px solid var(--primary); color: var(--primary);
                         cursor: pointer;">
            Import Template
          </button>
          <input type="file" id="importTemplateFile" accept=".json" style="display: none;" 
                 onchange="importTemplate(event); this.parentElement.parentElement.remove();">
          <button onclick="this.parentElement.parentElement.remove();" 
                  style="padding: 10px 20px; background: var(--bg-overlay);
                         border: 1px solid var(--danger); color: var(--danger);
                         cursor: pointer;">
            Cancel
          </button>
        </div>
      `;
      
      document.body.appendChild(dialog);
    }
    
    function applyTemplate(templateId) {
      if (window.panelTemplates) {
        window.panelTemplates.applyTemplate(templateId);
      }
    }
    
    function deleteTemplate(templateId) {
      if (window.panelTemplates) {
        window.panelTemplates.deleteCustomTemplate(templateId);
      }
    }
    
    function saveCurrentAsTemplate() {
      const name = prompt('Enter template name:');
      if (!name) return;
      
      const description = prompt('Enter template description (optional):') || '';
      
      try {
        if (window.panelTemplates) {
          window.panelTemplates.saveAsTemplate(name, description);
        }
      } catch (error) {
        alert('Failed to save template: ' + error.message);
      }
    }
    
    function importTemplate(event) {
      const file = event.target.files[0];
      if (!file) return;
      
      if (window.panelTemplates) {
        window.panelTemplates.importTemplate(file)
          .catch(error => alert('Failed to import template: ' + error.message));
      }
      
      event.target.value = '';
    }
    
    // Enhanced Templates Dialog Function
    function showTemplatesDialog() {
      const dialog = document.createElement('div');
      dialog.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: var(--bg-surface);
        border: 2px solid var(--primary);
        border-radius: 4px;
        padding: 20px;
        z-index: 10004;
        min-width: 500px;
        max-width: 700px;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0 0 30px rgba(0, 255, 255, 0.3);
      `;
      
      dialog.innerHTML = `
        <h3 style="margin: 0 0 20px 0; color: var(--primary); text-transform: uppercase; 
                   font-size: 18px; letter-spacing: 1px;">Templates & Layout Management</h3>
        
        <div style="display: grid; gap: 15px;">
          <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px;">
            <button onclick="showTemplatesDialog(); this.parentElement.parentElement.parentElement.remove();"
                    style="padding: 15px; background: var(--bg-overlay); border: 1px solid var(--primary);
                           color: var(--primary); cursor: pointer; border-radius: 4px; text-align: center;">
              <div style="font-size: 20px; margin-bottom: 5px;">📐</div>
              Apply Template
            </button>
            <button onclick="saveCurrentAsTemplate(); this.parentElement.parentElement.parentElement.remove();"
                    style="padding: 15px; background: var(--bg-overlay); border: 1px solid var(--accent);
                           color: var(--accent); cursor: pointer; border-radius: 4px; text-align: center;">
              <div style="font-size: 20px; margin-bottom: 5px;">💾</div>
              Save Current Layout
            </button>
            <button onclick="exportLayout(); this.parentElement.parentElement.parentElement.remove();"
                    style="padding: 15px; background: var(--bg-overlay); border: 1px solid var(--text-accent);
                           color: var(--text-accent); cursor: pointer; border-radius: 4px; text-align: center;">
              <div style="font-size: 20px; margin-bottom: 5px;">📤</div>
              Export Layout
            </button>
            <button onclick="document.getElementById('importLayoutFile').click(); this.parentElement.parentElement.parentElement.remove();"
                    style="padding: 15px; background: var(--bg-overlay); border: 1px solid var(--text-secondary);
                           color: var(--text-secondary); cursor: pointer; border-radius: 4px; text-align: center;">
              <div style="font-size: 20px; margin-bottom: 5px;">📥</div>
              Import Layout
            </button>
          </div>
        </div>
        
        <div style="display: flex; gap: 10px; justify-content: flex-end; margin-top: 20px;">
          <button onclick="this.parentElement.parentElement.remove();" 
                  style="padding: 10px 20px; background: var(--bg-overlay);
                         border: 1px solid var(--border-color); color: var(--text-secondary);
                         cursor: pointer; border-radius: 4px;">
            Close
          </button>
        </div>
      `;
      
      document.body.appendChild(dialog);
    }
    
    // Settings Dialog Function
    function showSettingsDialog() {
      createSettingsPanel();
    }
    
    function createSettingsPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = `settings-utilities-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Settings & Utilities',
        content: `
          <div id="${uniqueId}" class="settings-panel" style="height: 100%; overflow: auto; padding: 20px;">
            <div class="settings-tabs" style="display: flex; gap: 10px; margin-bottom: 20px; border-bottom: 1px solid var(--border-color); padding-bottom: 10px;">
              <button class="settings-tab active" data-tab="general" style="padding: 8px 16px; background: var(--primary); border: none; color: var(--bg-primary); cursor: pointer; border-radius: 4px 4px 0 0;">General</button>
              <button class="settings-tab" data-tab="profiles" style="padding: 8px 16px; background: var(--bg-surface); border: 1px solid var(--border-color); color: var(--text-primary); cursor: pointer; border-radius: 4px 4px 0 0;">User Profiles</button>
              <button class="settings-tab" data-tab="performance" style="padding: 8px 16px; background: var(--bg-surface); border: 1px solid var(--border-color); color: var(--text-primary); cursor: pointer; border-radius: 4px 4px 0 0;">Performance</button>
              <button class="settings-tab" data-tab="utilities" style="padding: 8px 16px; background: var(--bg-surface); border: 1px solid var(--border-color); color: var(--text-primary); cursor: pointer; border-radius: 4px 4px 0 0;">Utilities</button>
            </div>
            
            <div class="settings-content">
              <!-- General Tab -->
              <div class="settings-tab-content" data-content="general">
                <div style="display: grid; gap: 15px;">
                  <div class="setting-section">
                    <h4 style="color: var(--primary); margin-bottom: 10px;">Theme Settings</h4>
                    <button onclick="openThemeSelector()" class="cyber-button" style="width: 100%; padding: 12px;">
                      <span style="font-size: 18px; margin-right: 10px;">🎨</span>
                      Change Theme
                    </button>
                  </div>
                  
                  <div class="setting-section">
                    <h4 style="color: var(--primary); margin-bottom: 10px;">Sound Settings</h4>
                    <div style="display: flex; align-items: center; gap: 15px; margin-bottom: 10px;">
                      <label style="display: flex; align-items: center; gap: 10px;">
                        <input type="checkbox" id="sound-enabled-${uniqueId}" ${window.soundSystem && window.soundSystem.isEnabled() ? 'checked' : ''}>
                        Enable Sound Effects
                      </label>
                    </div>
                    <div style="display: flex; align-items: center; gap: 10px;">
                      <span>Volume:</span>
                      <input type="range" id="sound-volume-${uniqueId}" min="0" max="100" value="${window.soundSystem ? window.soundSystem.getVolume() * 100 : 30}" style="flex: 1;">
                      <span id="volume-display-${uniqueId}">${window.soundSystem ? Math.round(window.soundSystem.getVolume() * 100) : 30}%</span>
                    </div>
                    <div style="margin-top: 10px;">
                      <button id="test-sound-${uniqueId}" class="cyber-button small" style="width: 100%;">
                        🔊 Test Sound
                      </button>
                    </div>
                  </div>
                  
                  <div class="setting-section">
                    <h4 style="color: var(--primary); margin-bottom: 10px;">Auto-Save</h4>
                    <label style="display: flex; align-items: center; gap: 10px;">
                      <input type="checkbox" id="auto-save-${uniqueId}" checked>
                      Automatically save panel layouts
                    </label>
                  </div>
                </div>
              </div>
              
              <!-- User Profiles Tab -->
              <div class="settings-tab-content" data-content="profiles" style="display: none;">
                <div id="profile-content-${uniqueId}"></div>
              </div>
              
              <!-- Performance Tab -->
              <div class="settings-tab-content" data-content="performance" style="display: none;">
                <div style="display: grid; gap: 15px;">
                  <button onclick="togglePerformanceMode()" class="cyber-button" style="padding: 15px;">
                    <span style="font-size: 18px; margin-right: 10px;">⚡</span>
                    Toggle Performance Mode
                  </button>
                  <button onclick="createPerformancePanel()" class="cyber-button" style="padding: 15px;">
                    <span style="font-size: 18px; margin-right: 10px;">📊</span>
                    Open Performance Monitor
                  </button>
                </div>
              </div>
              
              <!-- Utilities Tab -->
              <div class="settings-tab-content" data-content="utilities" style="display: none;">
                <div style="display: grid; gap: 15px;">
                  <button onclick="createDebugPanel()" class="cyber-button" style="padding: 15px;">
                    <span style="font-size: 18px; margin-right: 10px;">🔧</span>
                    Debug Panel
                  </button>
                  <button onclick="window.campaignManager.showExportDialog()" class="cyber-button" style="padding: 15px;">
                    <span style="font-size: 18px; margin-right: 10px;">💾</span>
                    Export Campaign Data
                  </button>
                  <button onclick="window.campaignManager.showImportDialog()" class="cyber-button" style="padding: 15px;">
                    <span style="font-size: 18px; margin-right: 10px;">📂</span>
                    Import Campaign Data
                  </button>
                  <button onclick="clearAllData()" class="cyber-button danger" style="padding: 15px;">
                    <span style="font-size: 18px; margin-right: 10px;">🗑️</span>
                    Clear All Data
                  </button>
                </div>
              </div>
            </div>
          </div>
        `,
        position: { x: 320, y: 100 },
        size: { width: 600, height: 500 }
      });
      
      // Initialize settings panel
      setTimeout(() => {
        initializeSettingsPanel(uniqueId);
      }, 100);
    }
    
    function initializeSettingsPanel(uniqueId) {
      const container = document.getElementById(uniqueId);
      if (!container) return;
      
      // Tab switching
      const tabs = container.querySelectorAll('.settings-tab');
      const tabContents = container.querySelectorAll('.settings-tab-content');
      
      tabs.forEach(tab => {
        tab.addEventListener('click', () => {
          const targetTab = tab.getAttribute('data-tab');
          
          // Update active tab
          tabs.forEach(t => {
            t.classList.remove('active');
            t.style.background = 'var(--bg-surface)';
            t.style.color = 'var(--text-primary)';
            t.style.borderBottom = 'none';
          });
          tab.classList.add('active');
          tab.style.background = 'var(--primary)';
          tab.style.color = 'var(--bg-primary)';
          
          // Show corresponding content
          tabContents.forEach(content => {
            if (content.getAttribute('data-content') === targetTab) {
              content.style.display = 'block';
              
              // Load profile content when profiles tab is selected
              if (targetTab === 'profiles' && window.userProfileManager) {
                const profileContainer = document.getElementById(`profile-content-${uniqueId}`);
                if (profileContainer) {
                  profileContainer.innerHTML = '';
                  profileContainer.appendChild(window.userProfileManager.createPanelContent());
                }
              }
            } else {
              content.style.display = 'none';
            }
          });
        });
      });
      
      // Sound settings
      const soundEnabled = document.getElementById(`sound-enabled-${uniqueId}`);
      const soundVolume = document.getElementById(`sound-volume-${uniqueId}`);
      const volumeDisplay = document.getElementById(`volume-display-${uniqueId}`);
      
      if (soundEnabled && window.soundSystem) {
        soundEnabled.addEventListener('change', (e) => {
          window.soundSystem.setEnabled(e.target.checked);
          console.log('Sound enabled:', e.target.checked);
        });
      }
      
      if (soundVolume && volumeDisplay && window.soundSystem) {
        soundVolume.addEventListener('input', (e) => {
          const volume = e.target.value / 100;
          window.soundSystem.setVolume(volume);
          volumeDisplay.textContent = `${e.target.value}%`;
          console.log('Sound volume:', volume);
        });
      }
      
      // Test sound button
      const testSoundBtn = document.getElementById(`test-sound-${uniqueId}`);
      if (testSoundBtn && window.soundSystem) {
        testSoundBtn.addEventListener('click', () => {
          // Try to resume audio context if suspended
          if (window.soundSystem.audioContext && window.soundSystem.audioContext.state === 'suspended') {
            window.soundSystem.audioContext.resume().then(() => {
              window.soundSystem.play('button-click');
              window.soundSystem.play('notification');
            });
          } else {
            window.soundSystem.play('button-click');
            setTimeout(() => window.soundSystem.play('notification'), 200);
          }
        });
      }
    }
    
    function clearAllData() {
      if (confirm('Are you sure you want to clear all data? This cannot be undone!')) {
        localStorage.clear();
        alert('All data cleared. The page will now reload.');
        window.location.reload();
      }
    }
    
    // Keep old dialog function for backward compatibility
    function showSettingsDialogOld() {
      const dialog = document.createElement('div');
      dialog.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: var(--bg-surface);
        border: 2px solid var(--primary);
        border-radius: 4px;
        padding: 20px;
        z-index: 10004;
        min-width: 500px;
        max-width: 700px;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0 0 30px rgba(0, 255, 255, 0.3);
      `;
      
      dialog.innerHTML = `
        <h3 style="margin: 0 0 20px 0; color: var(--primary); text-transform: uppercase; 
                   font-size: 18px; letter-spacing: 1px;">Settings & Utilities</h3>
        
        <div style="display: grid; gap: 15px;">
          <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px;">
            <button onclick="openThemeSelector(); this.parentElement.parentElement.parentElement.remove();"
                    style="padding: 15px; background: var(--bg-overlay); border: 1px solid var(--primary);
                           color: var(--primary); cursor: pointer; border-radius: 4px; text-align: center;">
              <div style="font-size: 20px; margin-bottom: 5px;">🎨</div>
              Theme Settings
            </button>
            <button onclick="togglePerformanceMode(); this.parentElement.parentElement.parentElement.remove();"
                    style="padding: 15px; background: var(--bg-overlay); border: 1px solid var(--accent);
                           color: var(--accent); cursor: pointer; border-radius: 4px; text-align: center;">
              <div style="font-size: 20px; margin-bottom: 5px;">⚡</div>
              Performance Mode
            </button>
            <button onclick="toggleSound(); this.parentElement.parentElement.parentElement.remove();"
                    style="padding: 15px; background: var(--bg-overlay); border: 1px solid var(--text-accent);
                           color: var(--text-accent); cursor: pointer; border-radius: 4px; text-align: center;">
              <div style="font-size: 20px; margin-bottom: 5px;">🔊</div>
              Sound Settings
            </button>
            <button onclick="createDebugPanel(); this.parentElement.parentElement.parentElement.remove();"
                    style="padding: 15px; background: var(--bg-overlay); border: 1px solid var(--text-secondary);
                           color: var(--text-secondary); cursor: pointer; border-radius: 4px; text-align: center;">
              <div style="font-size: 20px; margin-bottom: 5px;">🔧</div>
              Debug Panel
            </button>
            <button onclick="createPerformancePanel(); this.parentElement.parentElement.parentElement.remove();"
                    style="padding: 15px; background: var(--bg-overlay); border: 1px solid var(--primary);
                           color: var(--primary); cursor: pointer; border-radius: 4px; text-align: center;">
              <div style="font-size: 20px; margin-bottom: 5px;">📊</div>
              Performance Monitor
            </button>
          </div>
          
          <div style="padding: 15px; background: var(--bg-overlay); border: 1px solid var(--border-color); border-radius: 4px;">
            <h4 style="margin: 0 0 10px 0; color: var(--accent);">Volume Control</h4>
            <div style="display: flex; align-items: center; gap: 10px;">
              <button onclick="adjustVolume(-0.1)" style="background: var(--bg-overlay); border: 1px solid var(--border-color); 
                      color: var(--text-primary); padding: 8px 12px; cursor: pointer; border-radius: 3px;">-</button>
              <span style="font-size: 14px; color: var(--text-secondary); min-width: 80px; text-align: center;">
                Volume: <span id="volumeDisplayDialog">50%</span>
              </span>
              <button onclick="adjustVolume(0.1)" style="background: var(--bg-overlay); border: 1px solid var(--border-color); 
                      color: var(--text-primary); padding: 8px 12px; cursor: pointer; border-radius: 3px;">+</button>
            </div>
          </div>
        </div>
        
        <div style="display: flex; gap: 10px; justify-content: flex-end; margin-top: 20px;">
          <button onclick="this.parentElement.parentElement.remove();" 
                  style="padding: 10px 20px; background: var(--bg-overlay);
                         border: 1px solid var(--border-color); color: var(--text-secondary);
                         cursor: pointer; border-radius: 4px;">
            Close
          </button>
        </div>
      `;
      
      document.body.appendChild(dialog);
    }
    
    // Help Dialog Function
    function showHelpDialog() {
      const dialog = document.createElement('div');
      dialog.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: var(--bg-surface);
        border: 2px solid var(--primary);
        border-radius: 4px;
        padding: 20px;
        z-index: 10004;
        min-width: 600px;
        max-width: 800px;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0 0 30px rgba(0, 255, 255, 0.3);
      `;
      
      dialog.innerHTML = `
        <h3 style="margin: 0 0 20px 0; color: var(--primary); text-transform: uppercase; 
                   font-size: 18px; letter-spacing: 1px;">Help & Shortcuts</h3>
        
        <div style="display: grid; gap: 20px;">
          <div style="padding: 15px; background: var(--bg-overlay); border: 1px solid var(--border-color); border-radius: 4px;">
            <h4 style="margin: 0 0 15px 0; color: var(--accent);">Keyboard Shortcuts</h4>
            <div style="display: grid; grid-template-columns: auto 1fr; gap: 10px 20px; font-size: 14px; line-height: 1.8;">
              <kbd style="background: var(--bg-overlay); padding: 4px 8px; border-radius: 3px; font-family: var(--font-mono); border: 1px solid var(--border-color);">1-9</kbd>
              <span>Quick switch between panels</span>
              <kbd style="background: var(--bg-overlay); padding: 4px 8px; border-radius: 3px; font-family: var(--font-mono); border: 1px solid var(--border-color);">Alt + Tab</kbd>
              <span>Cycle through open panels</span>
              <kbd style="background: var(--bg-overlay); padding: 4px 8px; border-radius: 3px; font-family: var(--font-mono); border: 1px solid var(--border-color);">Esc</kbd>
              <span>Minimize active panel</span>
              <kbd style="background: var(--bg-overlay); padding: 4px 8px; border-radius: 3px; font-family: var(--font-mono); border: 1px solid var(--border-color);">Ctrl + Arrow Keys</kbd>
              <span>Move active panel</span>
              <kbd style="background: var(--bg-overlay); padding: 4px 8px; border-radius: 3px; font-family: var(--font-mono); border: 1px solid var(--border-color);">Ctrl + Shift + Arrows</kbd>
              <span>Move panel faster</span>
            </div>
          </div>
          
          <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px;">
            <button onclick="createHelpPanel(); this.parentElement.parentElement.parentElement.remove();"
                    style="padding: 15px; background: var(--bg-overlay); border: 1px solid var(--primary);
                           color: var(--primary); cursor: pointer; border-radius: 4px; text-align: center;">
              <div style="font-size: 20px; margin-bottom: 5px;">📖</div>
              Detailed Help Panel
            </button>
            <button onclick="window.open('https://github.com/anthropics/claude-code', '_blank'); this.parentElement.parentElement.parentElement.remove();"
                    style="padding: 15px; background: var(--bg-overlay); border: 1px solid var(--accent);
                           color: var(--accent); cursor: pointer; border-radius: 4px; text-align: center;">
              <div style="font-size: 20px; margin-bottom: 5px;">🌐</div>
              Documentation
            </button>
          </div>
        </div>
        
        <div style="display: flex; gap: 10px; justify-content: flex-end; margin-top: 20px;">
          <button onclick="this.parentElement.parentElement.remove();" 
                  style="padding: 10px 20px; background: var(--bg-overlay);
                         border: 1px solid var(--border-color); color: var(--text-secondary);
                         cursor: pointer; border-radius: 4px;">
            Close
          </button>
        </div>
      `;
      
      document.body.appendChild(dialog);
    }
    
    // Campaign Management Functions
    function showCampaignDialog() {
      const stats = window.campaignManager.getCampaignStats();
      const campaign = window.campaignManager.currentCampaign;
      
      const dialog = document.createElement('div');
      dialog.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: var(--bg-surface);
        border: 2px solid var(--primary);
        border-radius: 4px;
        padding: 20px;
        z-index: 10004;
        min-width: 400px;
        max-width: 600px;
        box-shadow: 0 0 30px rgba(0, 255, 255, 0.3);
      `;
      
      dialog.innerHTML = `
        <h3 style="margin: 0 0 20px 0; color: var(--primary); text-transform: uppercase; 
                   font-size: 18px; letter-spacing: 1px;">Campaign Overview</h3>
        
        <div style="margin-bottom: 20px; padding: 15px; background: var(--bg-overlay); 
                    border: 1px solid var(--border-color); border-radius: 4px;">
          <h4 style="margin: 0 0 10px 0; color: var(--accent); font-size: 16px;">
            ${campaign?.name || 'Untitled Campaign'}
          </h4>
          <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; 
                      font-size: 14px; color: var(--text-secondary);">
            <div>📊 Panels: ${stats.panels}</div>
            <div>👥 NPCs: ${stats.npcs}</div>
            <div>🎲 Dice Rolls: ${stats.diceRolls}</div>
            <div>⚔️ Combatants: ${stats.combatants}</div>
            <div>📝 Notes: ${stats.notes} chars</div>
            <div>📐 Templates: ${stats.templates}</div>
            <div>💾 Size: ${stats.sizeKB} KB</div>
            <div>📅 Modified: ${new Date(stats.lastModified).toLocaleDateString()}</div>
          </div>
        </div>
        
        <div style="display: flex; gap: 10px; justify-content: space-between;">
          <button onclick="renameCampaign(); this.parentElement.parentElement.remove();"
                  style="padding: 10px 20px; background: var(--bg-overlay);
                         border: 1px solid var(--primary); color: var(--primary);
                         cursor: pointer;">
            Rename Campaign
          </button>
          <button onclick="this.parentElement.parentElement.remove();" 
                  style="padding: 10px 20px; background: var(--bg-overlay);
                         border: 1px solid var(--border-color); color: var(--text-secondary);
                         cursor: pointer;">
            Close
          </button>
        </div>
      `;
      
      document.body.appendChild(dialog);
    }
    
    function exportCampaign() {
      const includeHistory = confirm('Include roll history in export? (Larger file size)');
      window.campaignManager.exportCampaign({ includeHistory });
    }
    
    function importCampaign(event) {
      const file = event.target.files[0];
      if (!file) return;
      
      window.campaignManager.importCampaign(file, { merge: false })
        .catch(error => console.error('Import failed:', error));
      
      event.target.value = '';
    }
    
    function clearCampaignData() {
      window.campaignManager.clearCampaignData();
    }
    
    function renameCampaign() {
      const newName = prompt('Enter new campaign name:', 
        window.campaignManager.currentCampaign?.name || 'Untitled Campaign');
      
      if (newName) {
        if (!window.campaignManager.currentCampaign) {
          window.campaignManager.createCampaign(newName);
        } else {
          window.campaignManager.currentCampaign.name = newName;
          window.campaignManager.currentCampaign.modified = new Date().toISOString();
          window.campaignManager.saveCurrentCampaign();
        }
        
        PanelUtils.showNotification('Campaign renamed', 'success');
      }
    }
    
    // Global save indicator
    function showSaveIndicator(message = 'Data Saved') {
      const indicator = document.getElementById('saveIndicator');
      if (!indicator) return;
      
      indicator.textContent = message;
      indicator.classList.add('show');
      
      setTimeout(() => {
        indicator.classList.remove('show');
      }, 2000);
    }
    
    // Override localStorage.setItem to show save indicator
    const originalSetItem = localStorage.setItem;
    localStorage.setItem = function(key, value) {
      originalSetItem.call(localStorage, key, value);
      
      // Show save indicator for specific keys
      if (key.includes('cyberpunk-')) {
        let message = 'Data Saved';
        if (key.includes('dice-history')) message = 'Dice History Saved';
        else if (key.includes('combat-tracker')) message = 'Combat State Saved';
        else if (key.includes('session-notes')) message = 'Notes Saved';
        else if (key.includes('panel-layout')) message = 'Layout Saved';
        
        showSaveIndicator(message);
      }
    };
    
    // Sound controls
    function toggleSound() {
      if (window.soundManager) {
        window.soundManager.toggle();
        const btn = event.target.closest('button');
        btn.innerHTML = `<span class="icon">🔊</span> Sound: ${window.soundManager.enabled ? 'ON' : 'OFF'}`;
      }
    }
    
    function adjustVolume(delta) {
      if (window.soundManager) {
        const newVolume = Math.max(0, Math.min(1, window.soundManager.volume + delta));
        window.soundManager.setVolume(newVolume);
        document.getElementById('volumeDisplay').textContent = Math.round(newVolume * 100) + '%';
      }
    }
  </script>
  
  <!-- Sound Manager -->
  <script src="src/js/sound-manager.js"></script>
  <script>
    // Initialize sound manager
    window.soundManager = new SoundManager();
    
    // Additional panel creation functions
    function createEnhancedNetrunningInterface() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = 'netrunning-interface-' + Date.now();
      window.panelSystem.createPanel({
        title: 'Enhanced Netrunning Interface',
        content: '<div style="padding: 20px; height: 100%; overflow-y: auto; background: rgba(0,0,0,0.95); color: #00ff41; font-family: \'Courier New\', monospace;">' +
          '<div style="text-align: center; margin-bottom: 30px;">' +
            '<h2 style="color: #ff0040; font-size: 24px; margin: 0;">NETRUNNING INTERFACE v2.1</h2>' +
            '<p style="color: #00ff41; margin: 5px 0;">Advanced NET Operations Terminal</p>' +
          '</div>' +
          '<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">' +
            '<div style="border: 1px solid #00ff41; padding: 15px; background: rgba(0,255,65,0.1);">' +
              '<h3 style="color: #ff0040; margin-top: 0;">Connection Status</h3>' +
              '<div style="line-height: 1.8;">' +
                '<p><span style="color: #ffff00;">STATUS:</span> <span id="net-status-' + uniqueId + '">OFFLINE</span></p>' +
                '<p><span style="color: #ffff00;">NET HP:</span> <span id="net-hp-' + uniqueId + '">25/25</span></p>' +
                '<p><span style="color: #ffff00;">SPEED:</span> <span id="net-speed-' + uniqueId + '">3</span></p>' +
                '<p><span style="color: #ffff00;">TRACE:</span> <span id="trace-level-' + uniqueId + '">0/10</span></p>' +
              '</div>' +
              '<button onclick="toggleNetConnection(\'' + uniqueId + '\')" style="width: 100%; padding: 8px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; margin-top: 10px; cursor: pointer;">JACK IN/OUT</button>' +
            '</div>' +
            '<div style="border: 1px solid #00ff41; padding: 15px; background: rgba(0,255,65,0.1);">' +
              '<h3 style="color: #ff0040; margin-top: 0;">Current Subnet</h3>' +
              '<div style="line-height: 1.8;">' +
                '<p><span style="color: #ffff00;">ARCHITECTURE:</span> <span id="subnet-type-' + uniqueId + '">Basic</span></p>' +
                '<p><span style="color: #ffff00;">SECURITY:</span> <span id="security-level-' + uniqueId + '">Standard</span></p>' +
                '<p><span style="color: #ffff00;">ICE COUNT:</span> <span id="ice-count-' + uniqueId + '">2</span></p>' +
                '<p><span style="color: #ffff00;">ALERTS:</span> <span id="alert-level-' + uniqueId + '">GREEN</span></p>' +
              '</div>' +
              '<button onclick="scanSubnet(\'' + uniqueId + '\')" style="width: 100%; padding: 8px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; margin-top: 10px; cursor: pointer;">SCAN SUBNET</button>' +
            '</div>' +
          '</div>' +
          '<div style="border: 1px solid #ff0040; padding: 15px; margin-bottom: 20px; background: rgba(255,0,64,0.1);">' +
            '<h3 style="color: #ff0040; margin-top: 0;">NET Actions</h3>' +
            '<div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px;">' +
              '<button onclick="executeNetAction(\'backdoor\', \'' + uniqueId + '\')" style="padding: 8px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer;">BACKDOOR</button>' +
              '<button onclick="executeNetAction(\'cloak\', \'' + uniqueId + '\')" style="padding: 8px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer;">CLOAK</button>' +
              '<button onclick="executeNetAction(\'control\', \'' + uniqueId + '\')" style="padding: 8px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer;">CONTROL</button>' +
              '<button onclick="executeNetAction(\'eyedee\', \'' + uniqueId + '\')" style="padding: 8px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer;">EYE-DEE</button>' +
              '<button onclick="executeNetAction(\'pathfinder\', \'' + uniqueId + '\')" style="padding: 8px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer;">PATHFINDER</button>' +
              '<button onclick="executeNetAction(\'slide\', \'' + uniqueId + '\')" style="padding: 8px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer;">SLIDE</button>' +
              '<button onclick="executeNetAction(\'virus\', \'' + uniqueId + '\')" style="padding: 8px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer;">VIRUS</button>' +
              '<button onclick="executeNetAction(\'zap\', \'' + uniqueId + '\')" style="padding: 8px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer;">ZAP</button>' +
            '</div>' +
          '</div>' +
          '<div style="border: 1px solid #00ff41; padding: 15px; background: rgba(0,255,65,0.05);">' +
            '<h3 style="color: #ff0040; margin-top: 0;">Activity Log</h3>' +
            '<div id="activity-log-' + uniqueId + '" style="height: 200px; overflow-y: auto; border: 1px solid #333; padding: 10px; background: rgba(0,0,0,0.8); color: #00ff41; font-size: 12px;">' +
              '<p>>_ NETRUNNING INTERFACE INITIALIZED</p>' +
              '<p>>_ AWAITING CONNECTION...</p>' +
            '</div>' +
          '</div>' +
        '</div>',
        position: { x: 320, y: 50 },
        size: { width: 1000, height: 700 }
      });
      
      // Initialize netrunning interface functions
      if (!window.netConnectedStates) window.netConnectedStates = {};
      if (!window.traceLevels) window.traceLevels = {};
      
      window.netConnectedStates[uniqueId] = false;
      window.traceLevels[uniqueId] = 0;
      
      window.toggleNetConnection = function(panelId) {
        window.netConnectedStates[panelId] = !window.netConnectedStates[panelId];
        const status = document.getElementById('net-status-' + panelId);
        const log = document.getElementById('activity-log-' + panelId);
        
        if (window.netConnectedStates[panelId]) {
          status.textContent = 'CONNECTED';
          status.style.color = '#00ff41';
          addToNetLog('JACK IN SUCCESSFUL - CONNECTED TO LOCAL SUBNET', panelId);
        } else {
          status.textContent = 'OFFLINE';
          status.style.color = '#ff0040';
          addToNetLog('JACK OUT COMPLETE - CONNECTION TERMINATED', panelId);
          window.traceLevels[panelId] = 0;
          updateNetTrace(panelId);
        }
      };
      
      window.scanSubnet = function(panelId) {
        if (!window.netConnectedStates[panelId]) {
          addToNetLog('ERROR: NOT CONNECTED TO SUBNET', panelId);
          return;
        }
        addToNetLog('SCANNING SUBNET ARCHITECTURE...', panelId);
        setTimeout(function() {
          addToNetLog('SCAN COMPLETE - 2 ICE DETECTED, 1 DATA FORTRESS', panelId);
        }, 1000);
      };
      
      window.executeNetAction = function(action, panelId) {
        if (!window.netConnectedStates[panelId]) {
          addToNetLog('ERROR: NOT CONNECTED TO SUBNET', panelId);
          return;
        }
        
        const actions = {
          backdoor: 'ATTEMPTING BACKDOOR - ROLL INTERFACE + 1d10 vs DV',
          cloak: 'ACTIVATING STEALTH PROTOCOLS - CLOAKING...',
          control: 'ATTEMPTING DEVICE CONTROL - ROLL INTERFACE + 1d10',
          eyedee: 'SCANNING ICE SIGNATURES - IDENTIFICATION IN PROGRESS',
          pathfinder: 'MAPPING SUBNET ARCHITECTURE - PATHFINDING ACTIVE',
          slide: 'MOVING THROUGH SUBNET LEVELS - SLIDING...',
          virus: 'UPLOADING VIRUS PAYLOAD - DELIVERY IN PROGRESS',
          zap: 'DIRECT ICE ATTACK - ROLLING DAMAGE'
        };
        
        addToNetLog(actions[action.toLowerCase()] || 'UNKNOWN COMMAND', panelId);
        
        if (Math.random() > 0.7) {
          window.traceLevels[panelId] = Math.min(10, window.traceLevels[panelId] + 1);
          updateNetTrace(panelId);
          if (window.traceLevels[panelId] >= 5) {
            addToNetLog('WARNING: HIGH TRACE LEVEL DETECTED', panelId);
          }
        }
      };
      
      window.updateNetTrace = function(panelId) {
        const element = document.getElementById('trace-level-' + panelId);
        if (element) {
          element.textContent = window.traceLevels[panelId] + '/10';
          if (window.traceLevels[panelId] >= 7) {
            element.style.color = '#ff0040';
          } else if (window.traceLevels[panelId] >= 4) {
            element.style.color = '#ffff00';
          } else {
            element.style.color = '#00ff41';
          }
        }
      };
      
      window.addToNetLog = function(message, panelId) {
        const log = document.getElementById('activity-log-' + panelId);
        if (log) {
          const timestamp = new Date().toLocaleTimeString();
          const entry = document.createElement('p');
          entry.textContent = '[' + timestamp + '] >_ ' + message;
          log.appendChild(entry);
          log.scrollTop = log.scrollHeight;
        }
      };
    }
    
    function createNetrunningPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      window.panelSystem.createPanel({
        title: 'Netrunning Rules - Cyberpunk Red',
        content: '<div style="padding: 20px; height: 100%; overflow-y: auto; background: rgba(0,0,0,0.9); color: #00ff41; font-family: \'Courier New\', monospace;">' +
          '<h2 style="color: #ff0040; text-align: center; margin-bottom: 20px;">NETRUNNING SYSTEM</h2>' +
          '<div style="border: 1px solid #00ff41; padding: 15px; margin-bottom: 20px; background: rgba(0,255,65,0.1);">' +
            '<h3 style="color: #ff0040; margin-top: 0;">Basic Netrunning Process</h3>' +
            '<ol style="line-height: 1.6;">' +
              '<li><strong>Jack In:</strong> Netrunner connects to the local subnet</li>' +
              '<li><strong>Interface:</strong> Actions take place on NET Turn (6 seconds)</li>' +
              '<li><strong>Navigate:</strong> Move through Architecture levels</li>' +
              '<li><strong>Execute Programs:</strong> Attack ICE, access files, etc.</li>' +
              '<li><strong>Jack Out:</strong> Safely disconnect or emergency logout</li>' +
            '</ol>' +
          '</div>' +
          '<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">' +
            '<div style="border: 1px solid #00ff41; padding: 15px; background: rgba(0,255,65,0.05);">' +
              '<h3 style="color: #ff0040; margin-top: 0;">NET Actions (Choose 1 per turn)</h3>' +
              '<ul style="line-height: 1.5;">' +
                '<li><strong>Backdoor:</strong> DV 8 + ICE REZ cost, bypass ICE</li>' +
                '<li><strong>Cloak:</strong> DV 8 + Level, become invisible to ICE</li>' +
                '<li><strong>Control:</strong> Take control of device/system</li>' +
                '<li><strong>Eye-Dee:</strong> Identify ICE type and stats</li>' +
                '<li><strong>Pathfinder:</strong> Map subnet architecture</li>' +
                '<li><strong>Slide:</strong> Move through subnet levels</li>' +
                '<li><strong>Virus:</strong> Upload damaging program</li>' +
                '<li><strong>Zap:</strong> Direct attack on ICE or Avatar</li>' +
              '</ul>' +
            '</div>' +
            '<div style="border: 1px solid #00ff41; padding: 15px; background: rgba(0,255,65,0.05);">' +
              '<h3 style="color: #ff0040; margin-top: 0;">ICE Types & Effects</h3>' +
              '<ul style="line-height: 1.5;">' +
                '<li><strong>Asp:</strong> REZ 6, attacks with Poison</li>' +
                '<li><strong>Giant:</strong> REZ 8, high damage attacker</li>' +
                '<li><strong>Hellhound:</strong> REZ 10, burns programs</li>' +
                '<li><strong>Kraken:</strong> REZ 12, grapples and drags down</li>' +
                '<li><strong>Liche:</strong> REZ 14, drains RAM</li>' +
                '<li><strong>Raven:</strong> REZ 4, alerts security</li>' +
                '<li><strong>Scorpion:</strong> REZ 6, causes neural damage</li>' +
                '<li><strong>Wisp:</strong> REZ 4, detection and tracking</li>' +
              '</ul>' +
            '</div>' +
          '</div>' +
          '<div style="border: 1px solid #ff0040; padding: 15px; margin-bottom: 20px; background: rgba(255,0,64,0.1);">' +
            '<h3 style="color: #ff0040; margin-top: 0;">Brain Damage & Consequences</h3>' +
            '<ul style="line-height: 1.6;">' +
              '<li><strong>Neural Damage:</strong> Reduces MAX HP permanently</li>' +
              '<li><strong>Burnout:</strong> At 0 HP in NET, take neural damage equal to remaining damage</li>' +
              '<li><strong>Trace:</strong> Being traced while netrunning alerts authorities</li>' +
              '<li><strong>Emergency Jack Out:</strong> Avoid neural damage but suffer 1d6 damage</li>' +
            '</ul>' +
          '</div>' +
          '<div style="border: 1px solid #00ff41; padding: 15px; margin-top: 20px; background: rgba(0,255,65,0.1);">' +
            '<h3 style="color: #ff0040; margin-top: 0;">Quick Reference</h3>' +
            '<p style="line-height: 1.6; margin-bottom: 10px;">' +
              '<strong>NET Turn:</strong> 6 seconds real time<br>' +
              '<strong>Detection:</strong> Failing stealth alerts ICE<br>' +
              '<strong>Trace Progress:</strong> Accumulates each turn when detected<br>' +
              '<strong>Jack Out Time:</strong> 3 actions (18 seconds) for safe logout' +
            '</p>' +
          '</div>' +
        '</div>',
        position: { x: 320, y: 80 },
        size: { width: 800, height: 600 }
      });
    }
    
    function createSoundPanel() {
      if (!window.panelSystem || !window.soundSystem) {
        console.error('Panel system or sound system not initialized');
        return;
      }
      
      const uniqueId = `sound-settings-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Sound Settings',
        content: `<div id="${uniqueId}" style="height: 100%; overflow: auto;"></div>`,
        position: { x: 400, y: 250 },
        size: { width: 350, height: 400 }
      });
      
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container && window.soundSystem) {
          container.innerHTML = window.soundSystem.createSettingsPanel();
          window.soundSystem.attachSettingsListeners(container);
        }
      }, 100);
    }
    
    function createHelpPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      window.panelSystem.createPanel({
        title: 'Help & Shortcuts',
        content: `
          <div style="padding: 20px; height: 100%; overflow: auto;">
            <h3 style="color: var(--primary); margin-bottom: 15px;">Keyboard Shortcuts</h3>
            <div style="font-size: 14px; line-height: 1.8;">
              <div><kbd>Ctrl+D</kbd> - Open Dice Roller</div>
              <div><kbd>Ctrl+N</kbd> - Create Note</div>
              <div><kbd>Ctrl+S</kbd> - Save Layout</div>
              <div><kbd>Ctrl+O</kbd> - Open Layout</div>
              <div><kbd>Esc</kbd> - Close Active Panel</div>
              <div><kbd>1-9</kbd> - Quick Switch Panels</div>
              <div><kbd>Ctrl+Shift+F</kbd> - Fit All Panels</div>
              <div><kbd>Ctrl+Shift+M</kbd> - Minimize All</div>
            </div>
            
            <h3 style="color: var(--primary); margin: 20px 0 15px;">Panel Controls</h3>
            <div style="font-size: 14px; line-height: 1.8;">
              <div>• Drag panel headers to move</div>
              <div>• Drag panel edges to resize</div>
              <div>• Double-click header to minimize</div>
              <div>• Click X to close panel</div>
              <div>• Right-click for context menu</div>
            </div>
            
            <h3 style="color: var(--primary); margin: 20px 0 15px;">Tips</h3>
            <div style="font-size: 14px; line-height: 1.8;">
              <div>• Save layouts for different scenarios</div>
              <div>• Use templates for quick setup</div>
              <div>• Export campaign data regularly</div>
              <div>• Enable sound for immersive experience</div>
            </div>
          </div>
        `,
        position: { x: 350, y: 150 },
        size: { width: 400, height: 500 }
      });
    }
    
    function createCollaborationPanel() {
      if (!window.panelSystem || !window.collaborationSystem) {
        console.error('Panel system or collaboration system not initialized');
        return;
      }
      
      const uniqueId = `collaboration-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Collaboration',
        content: `<div id="${uniqueId}" style="height: 100%; overflow: auto;"></div>`,
        position: { x: 500, y: 100 },
        size: { width: 350, height: 500 }
      });
      
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container && window.collaborationSystem) {
          container.innerHTML = window.collaborationSystem.createCollaborationPanel();
          
          // Update panel on connection events
          ['room-created', 'peer-connected', 'peer-disconnected', 'disconnected'].forEach(event => {
            document.addEventListener('collaboration-' + event, () => {
              if (container.isConnected) {
                container.innerHTML = window.collaborationSystem.createCollaborationPanel();
              }
            });
          });
        }
      }, 100);
    }
    
    function createAtmospherePanel() {
      if (!window.panelSystem || !window.atmosphereSystem) {
        console.error('Panel system or atmosphere system not initialized');
        return;
      }
      
      const uniqueId = `atmosphere-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Atmosphere Control',
        content: `<div id="${uniqueId}" style="height: 100%; overflow: auto;"></div>`,
        position: { x: 600, y: 150 },
        size: { width: 300, height: 450 }
      });
      
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container && window.atmosphereSystem) {
          container.innerHTML = window.atmosphereSystem.createControlPanel();
        }
      }, 100);
    }
    
    function createAIAssistantPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = `ai-assistant-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'AI GM Assistant',
        content: `<ai-gm-assistant id="${uniqueId}"></ai-gm-assistant>`,
        position: { x: 100, y: 100 },
        size: { width: 600, height: 700 }
      });
    }
    
    function createCampaignTrackerPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = `campaign-tracker-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Campaign Tracker',
        content: `<campaign-tracker id="${uniqueId}"></campaign-tracker>`,
        position: { x: 320, y: 80 },
        size: { width: 800, height: 600 }
      });
    }
    
    function createAdvancedEncounterPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = `encounter-panel-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Encounter Generator',
        content: `<div id="${uniqueId}" style="height: 100%; overflow: hidden;"></div>`,
        position: { x: 320, y: 100 },
        size: { width: 700, height: 600 }
      });
      
      // Initialize the encounter panel after DOM is ready
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container) {
          // Use the simpler implementation that handles dynamic DOM better
          if (window.SimpleEncounterPanel) {
            new SimpleEncounterPanel(uniqueId);
          } else if (window.AdvancedEncounterPanel) {
            // Fallback to advanced panel if available
            new AdvancedEncounterPanel(uniqueId);
          } else {
            // Final fallback
            container.innerHTML = `
              <div style="text-align: center; padding: 40px; color: #0ff;">
                <h3 style="color: #f0f; margin-bottom: 20px;">Encounter Generator</h3>
                <p style="margin-bottom: 20px; color: #f00;">Error: Encounter generator scripts not loaded</p>
                <button onclick="location.reload()" class="btn-primary">Reload Page</button>
              </div>
            `;
          }
        }
      }, 100);
    }
  </script>
  
  <!-- Service Worker Registration -->
  <script>
    // Only register service worker if running on http/https protocol (not file://)
    if ('serviceWorker' in navigator && window.location.protocol !== 'file:') {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('./service-worker.js')
          .then((registration) => {
            console.log('Service Worker registered:', registration);
            
            // Check for updates periodically
            setInterval(() => {
              registration.update();
            }, 60 * 60 * 1000); // Check every hour
            
            // Handle updates
            registration.addEventListener('updatefound', () => {
              const newWorker = registration.installing;
              newWorker.addEventListener('statechange', () => {
                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                  // New update available
                  if (confirm('New version available! Reload to update?')) {
                    newWorker.postMessage({ type: 'SKIP_WAITING' });
                    window.location.reload();
                  }
                }
              });
            });
          })
          .catch((error) => {
            console.error('Service Worker registration failed:', error);
          });
        
        // Handle service worker messages
        navigator.serviceWorker.addEventListener('message', (event) => {
          if (event.data.type === 'UPDATE_AVAILABLE') {
            PanelUtils.showNotification('Update available! Reload to get the latest version.', 'info');
          }
          
          if (event.data.type === 'SYNC_CAMPAIGN_DATA') {
            // Sync campaign data
            if (window.campaignManager) {
              const data = window.campaignManager.gatherCampaignData();
              navigator.serviceWorker.controller.postMessage({
                type: 'CACHE_CAMPAIGN_DATA',
                data: data
              });
            }
          }
        });
      });
      
      // Enable background sync
      if ('sync' in self.registration) {
        window.addEventListener('beforeunload', () => {
          self.registration.sync.register('sync-campaign-data');
        });
      }
      
      // Request notification permission for updates
      if ('Notification' in window && Notification.permission === 'default') {
        // Don't ask immediately, wait for user interaction
        document.addEventListener('click', () => {
          Notification.requestPermission();
        }, { once: true });
      }
    }
  </script>
  
  <script>
    // Initiative Tracker Panel
    function createInitiativePanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = `initiative-tracker-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Initiative Tracker',
        content: `<div id="${uniqueId}" style="height: 100%; overflow: auto; padding: 15px; background: rgba(0,0,0,0.9);"></div>`,
        position: { x: 100, y: 100 },
        size: { width: 400, height: 500 }
      });
      
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container) {
          container.innerHTML = `
            <div style="color: #0ff; font-family: 'Courier New', monospace;">
              <h3 style="color: #f0f; margin-bottom: 15px; text-transform: uppercase; border-bottom: 1px solid #f0f; padding-bottom: 5px;">Combat Initiative</h3>
              
              <div style="margin-bottom: 20px;">
                <div style="display: flex; gap: 10px; margin-bottom: 10px;">
                  <input type="text" id="char-name-${uniqueId}" placeholder="Character Name" style="flex: 1; background: #1a1a1a; border: 1px solid #0ff; color: #0ff; padding: 8px; font-family: inherit;">
                  <input type="number" id="char-init-${uniqueId}" placeholder="Init" style="width: 60px; background: #1a1a1a; border: 1px solid #0ff; color: #0ff; padding: 8px; font-family: inherit;">
                </div>
                <div style="display: flex; gap: 10px;">
                  <button onclick="addInitiativeEntry('${uniqueId}')" style="flex: 1; background: #0f4f4f; border: 1px solid #0ff; color: #0ff; padding: 8px; cursor: pointer; font-family: inherit;">Add Character</button>
                  <button onclick="sortInitiative('${uniqueId}')" style="background: #4f0f4f; border: 1px solid #f0f; color: #f0f; padding: 8px; cursor: pointer; font-family: inherit;">Sort</button>
                  <button onclick="clearInitiative('${uniqueId}')" style="background: #4f4f0f; border: 1px solid #ff0; color: #ff0; padding: 8px; cursor: pointer; font-family: inherit;">Clear</button>
                </div>
              </div>
              
              <div style="border: 1px solid #0ff; background: rgba(0,255,255,0.1); padding: 10px;">
                <h4 style="color: #0ff; margin: 0 0 10px 0;">Initiative Order</h4>
                <div id="initiative-list-${uniqueId}" style="min-height: 200px;">
                  <div style="color: #666; text-align: center; padding: 20px;">No characters added yet</div>
                </div>
              </div>
              
              <div style="margin-top: 15px; padding: 10px; border: 1px solid #444; background: rgba(255,255,255,0.05);">
                <div style="font-size: 12px; color: #888;">
                  <strong>Instructions:</strong><br>
                  • Add characters with their initiative scores<br>
                  • Click "Sort" to arrange by initiative (highest first)<br>
                  • Click on character names to highlight current turn
                </div>
              </div>
            </div>
          `;
        }
      }, 100);
    }
    
    // Status Effects Panel
    function createStatusEffectsPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = `status-effects-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Status Effects Tracker',
        content: `<div id="${uniqueId}" style="height: 100%; overflow: auto; padding: 15px; background: rgba(0,0,0,0.9);"></div>`,
        position: { x: 340, y: 150 },
        size: { width: 450, height: 600 }
      });
      
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container) {
          container.innerHTML = `
            <div style="color: #0ff; font-family: 'Courier New', monospace;">
              <h3 style="color: #f0f; margin-bottom: 15px; text-transform: uppercase; border-bottom: 1px solid #f0f; padding-bottom: 5px;">Status Effects</h3>
              
              <div style="margin-bottom: 20px;">
                <div style="display: flex; gap: 10px; margin-bottom: 10px;">
                  <input type="text" id="effect-char-${uniqueId}" placeholder="Character" style="flex: 1; background: #1a1a1a; border: 1px solid #0ff; color: #0ff; padding: 8px; font-family: inherit;">
                  <select id="effect-type-${uniqueId}" style="background: #1a1a1a; border: 1px solid #0ff; color: #0ff; padding: 8px; font-family: inherit;">
                    <option value="stunned">Stunned</option>
                    <option value="blinded">Blinded</option>
                    <option value="deafened">Deafened</option>
                    <option value="prone">Prone</option>
                    <option value="grappled">Grappled</option>
                    <option value="suppressed">Suppressed</option>
                    <option value="on-fire">On Fire</option>
                    <option value="bleeding">Bleeding</option>
                    <option value="poisoned">Poisoned</option>
                    <option value="confused">Confused</option>
                    <option value="enraged">Enraged</option>
                    <option value="terrified">Terrified</option>
                    <option value="custom">Custom</option>
                  </select>
                </div>
                <div style="display: flex; gap: 10px; margin-bottom: 10px;">
                  <input type="text" id="effect-custom-${uniqueId}" placeholder="Custom Effect Name" style="flex: 1; background: #1a1a1a; border: 1px solid #0ff; color: #0ff; padding: 8px; font-family: inherit;" disabled>
                  <input type="number" id="effect-duration-${uniqueId}" placeholder="Rounds" style="width: 80px; background: #1a1a1a; border: 1px solid #0ff; color: #0ff; padding: 8px; font-family: inherit;">
                </div>
                <button onclick="addStatusEffect('${uniqueId}')" style="width: 100%; background: #0f4f4f; border: 1px solid #0ff; color: #0ff; padding: 8px; cursor: pointer; font-family: inherit;">Add Status Effect</button>
              </div>
              
              <div style="border: 1px solid #0ff; background: rgba(0,255,255,0.1); padding: 10px; margin-bottom: 15px;">
                <h4 style="color: #0ff; margin: 0 0 10px 0;">Active Effects</h4>
                <div id="status-list-${uniqueId}" style="min-height: 150px;">
                  <div style="color: #666; text-align: center; padding: 20px;">No active status effects</div>
                </div>
              </div>
              
              <div style="display: flex; gap: 10px; margin-bottom: 15px;">
                <button onclick="advanceRound('${uniqueId}')" style="flex: 1; background: #4f0f4f; border: 1px solid #f0f; color: #f0f; padding: 8px; cursor: pointer; font-family: inherit;">Next Round</button>
                <button onclick="clearAllEffects('${uniqueId}')" style="background: #4f4f0f; border: 1px solid #ff0; color: #ff0; padding: 8px; cursor: pointer; font-family: inherit;">Clear All</button>
              </div>
              
              <div style="padding: 10px; border: 1px solid #444; background: rgba(255,255,255,0.05);">
                <div style="font-size: 12px; color: #888;">
                  <strong>Common Effects:</strong><br>
                  • <strong>Stunned:</strong> Lose next action (-2 to rolls)<br>
                  • <strong>Blinded:</strong> -6 to sight-based actions<br>
                  • <strong>Prone:</strong> -2 melee, +2 ranged defense<br>
                  • <strong>On Fire:</strong> 1d6 damage per round<br>
                  • <strong>Bleeding:</strong> -1 HP per minute
                </div>
              </div>
            </div>
          `;
          
          // Enable/disable custom effect input based on selection
          const effectSelect = container.querySelector('#effect-type-' + uniqueId);
          const customInput = container.querySelector('#effect-custom-' + uniqueId);
          
          effectSelect.addEventListener('change', () => {
            if (effectSelect.value === 'custom') {
              customInput.disabled = false;
              customInput.focus();
            } else {
              customInput.disabled = true;
              customInput.value = '';
            }
          });
        }
      }, 100);
    }
    
    // Supporting functions for Initiative Tracker
    function addInitiativeEntry(panelId) {
      const nameInput = document.getElementById('char-name-' + panelId);
      const initInput = document.getElementById('char-init-' + panelId);
      const list = document.getElementById('initiative-list-' + panelId);
      
      const name = nameInput.value.trim();
      const init = parseInt(initInput.value);
      
      if (!name || isNaN(init)) {
        alert('Please enter both character name and initiative value');
        return;
      }
      
      // Clear the "no characters" message if present
      if (list.innerHTML.includes('No characters added yet')) {
        list.innerHTML = '';
      }
      
      const entry = document.createElement('div');
      entry.style.cssText = 'display: flex; justify-content: space-between; align-items: center; padding: 8px; margin-bottom: 5px; background: rgba(0,255,255,0.1); border: 1px solid #0ff; cursor: pointer;';
      entry.innerHTML = `
        <span style="color: #0ff; font-weight: bold;">${name}</span>
        <span style="color: #f0f; font-weight: bold;">${init}</span>
        <button onclick="this.parentElement.remove()" style="background: #f00; border: none; color: #fff; padding: 2px 6px; cursor: pointer; font-size: 12px;">✕</button>
      `;
      
      // Add click handler to highlight current turn
      entry.addEventListener('click', (e) => {
        if (e.target.tagName !== 'BUTTON') {
          // Remove previous highlights
          list.querySelectorAll('div').forEach(div => {
            div.style.background = 'rgba(0,255,255,0.1)';
          });
          // Highlight this entry
          entry.style.background = 'rgba(255,0,255,0.3)';
        }
      });
      
      entry.dataset.init = init;
      list.appendChild(entry);
      
      // Clear inputs
      nameInput.value = '';
      initInput.value = '';
      nameInput.focus();
    }
    
    function sortInitiative(panelId) {
      const list = document.getElementById('initiative-list-' + panelId);
      const entries = Array.from(list.children);
      
      if (entries.length === 0 || (entries.length === 1 && entries[0].innerHTML.includes('No characters'))) {
        return;
      }
      
      entries.sort((a, b) => parseInt(b.dataset.init) - parseInt(a.dataset.init));
      
      list.innerHTML = '';
      entries.forEach(entry => list.appendChild(entry));
    }
    
    function clearInitiative(panelId) {
      const list = document.getElementById('initiative-list-' + panelId);
      list.innerHTML = '<div style="color: #666; text-align: center; padding: 20px;">No characters added yet</div>';
    }
    
    // Supporting functions for Status Effects
    function addStatusEffect(panelId) {
      const charInput = document.getElementById('effect-char-' + panelId);
      const typeSelect = document.getElementById('effect-type-' + panelId);
      const customInput = document.getElementById('effect-custom-' + panelId);
      const durationInput = document.getElementById('effect-duration-' + panelId);
      const list = document.getElementById('status-list-' + panelId);
      
      const character = charInput.value.trim();
      const effectType = typeSelect.value === 'custom' ? customInput.value.trim() : typeSelect.value;
      const duration = parseInt(durationInput.value) || 1;
      
      if (!character || !effectType) {
        alert('Please enter character name and effect type');
        return;
      }
      
      // Clear the "no effects" message if present
      if (list.innerHTML.includes('No active status effects')) {
        list.innerHTML = '';
      }
      
      const entry = document.createElement('div');
      entry.style.cssText = 'display: flex; justify-content: space-between; align-items: center; padding: 8px; margin-bottom: 5px; background: rgba(255,0,255,0.1); border: 1px solid #f0f;';
      entry.innerHTML = `
        <div>
          <div style="color: #0ff; font-weight: bold;">${character}</div>
          <div style="color: #f0f; font-size: 12px; text-transform: capitalize;">${effectType.replace('-', ' ')}</div>
        </div>
        <div style="text-align: right;">
          <div style="color: #ff0; font-weight: bold;">${duration} rounds</div>
          <button onclick="this.parentElement.parentElement.remove()" style="background: #f00; border: none; color: #fff; padding: 2px 6px; cursor: pointer; font-size: 12px; margin-top: 2px;">Remove</button>
        </div>
      `;
      
      entry.dataset.duration = duration;
      list.appendChild(entry);
      
      // Clear inputs
      charInput.value = '';
      durationInput.value = '';
      if (typeSelect.value === 'custom') {
        customInput.value = '';
      }
      charInput.focus();
    }
    
    function advanceRound(panelId) {
      const list = document.getElementById('status-list-' + panelId);
      const entries = Array.from(list.children);
      
      entries.forEach(entry => {
        if (entry.dataset.duration) {
          const currentDuration = parseInt(entry.dataset.duration) - 1;
          entry.dataset.duration = currentDuration;
          
          const durationElement = entry.querySelector('div:last-child div:first-child');
          if (durationElement) {
            if (currentDuration <= 0) {
              entry.style.opacity = '0.5';
              durationElement.innerHTML = '<span style="color: #f00;">EXPIRED</span>';
            } else {
              durationElement.innerHTML = `${currentDuration} rounds`;
            }
          }
        }
      });
    }
    
    function clearAllEffects(panelId) {
      const list = document.getElementById('status-list-' + panelId);
      list.innerHTML = '<div style="color: #666; text-align: center; padding: 20px;">No active status effects</div>';
    }
    
    // Corporation Generator Panel
    function createCorporationPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = `corporation-generator-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Corporation Generator',
        content: `<div id="${uniqueId}" style="height: 100%; overflow: auto; padding: 15px; background: rgba(0,0,0,0.9);"></div>`,
        position: { x: 100, y: 80 },
        size: { width: 500, height: 650 }
      });
      
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container) {
          container.innerHTML = `
            <div style="color: #0ff; font-family: 'Courier New', monospace;">
              <h3 style="color: #f0f; margin-bottom: 15px; text-transform: uppercase; border-bottom: 1px solid #f0f; padding-bottom: 5px;">Corporate Generator</h3>
              
              <div style="margin-bottom: 20px;">
                <button onclick="generateCorporation('${uniqueId}')" style="width: 100%; background: #0f4f4f; border: 1px solid #0ff; color: #0ff; padding: 12px; cursor: pointer; font-family: inherit; font-size: 16px; font-weight: bold;">Generate Corporation</button>
              </div>
              
              <div id="corp-result-${uniqueId}" style="border: 1px solid #0ff; background: rgba(0,255,255,0.1); padding: 15px; min-height: 400px;">
                <div style="color: #666; text-align: center; padding: 40px;">Click "Generate Corporation" to create a new corporate entity</div>
              </div>
              
              <div style="margin-top: 15px; padding: 10px; border: 1px solid #444; background: rgba(255,255,255,0.05);">
                <div style="font-size: 12px; color: #888;">
                  <strong>Generator Features:</strong><br>
                  • Procedural corporation names and specialties<br>
                  • Corporate structure and key personnel<br>
                  • Business operations and reputation<br>
                  • Assets, resources, and threat level
                </div>
              </div>
            </div>
          `;
        }
      }, 100);
    }
    
    // Gang Generator Panel
    function createGangPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = `gang-generator-${Date.now()}`;
      window.panelSystem.createPanel({
        title: 'Gang Generator',
        content: `<div id="${uniqueId}" style="height: 100%; overflow: auto; padding: 15px; background: rgba(0,0,0,0.9);"></div>`,
        position: { x: 340, y: 120 },
        size: { width: 480, height: 600 }
      });
      
      setTimeout(() => {
        const container = document.getElementById(uniqueId);
        if (container) {
          container.innerHTML = `
            <div style="color: #0ff; font-family: 'Courier New', monospace;">
              <h3 style="color: #f0f; margin-bottom: 15px; text-transform: uppercase; border-bottom: 1px solid #f0f; padding-bottom: 5px;">Gang Generator</h3>
              
              <div style="margin-bottom: 20px;">
                <button onclick="generateGang('${uniqueId}')" style="width: 100%; background: #0f4f4f; border: 1px solid #0ff; color: #0ff; padding: 12px; cursor: pointer; font-family: inherit; font-size: 16px; font-weight: bold;">Generate Gang</button>
              </div>
              
              <div id="gang-result-${uniqueId}" style="border: 1px solid #0ff; background: rgba(0,255,255,0.1); padding: 15px; min-height: 350px;">
                <div style="color: #666; text-align: center; padding: 40px;">Click "Generate Gang" to create a new street gang</div>
              </div>
              
              <div style="margin-top: 15px; padding: 10px; border: 1px solid #444; background: rgba(255,255,255,0.05);">
                <div style="font-size: 12px; color: #888;">
                  <strong>Generator Features:</strong><br>
                  • Random gang names and territories<br>
                  • Leadership structure and key figures<br>
                  • Criminal activities and specialties<br>
                  • Resources, threats, and rival relations
                </div>
              </div>
            </div>
          `;
        }
      }, 100);
    }
    
    // Corporation Generation Logic
    function generateCorporation(panelId) {
      const resultDiv = document.getElementById('corp-result-' + panelId);
      
      // Corporation data arrays
      const corpTypes = ['Biotechnology', 'Military Technology', 'Information Systems', 'Manufacturing', 'Security Services', 'Entertainment Media', 'Financial Services', 'Transportation', 'Energy Systems', 'Pharmaceuticals'];
      const corpSizes = ['Startup', 'Regional', 'National', 'Multinational', 'Megacorporation'];
      const corpPrefixes = ['Aether', 'Nexus', 'Quantum', 'Cyber', 'Meta', 'Synth', 'Neo', 'Ultra', 'Techno', 'Global', 'United', 'Advanced', 'Future', 'Digital', 'Apex'];
      const corpSuffixes = ['Corp', 'Industries', 'Systems', 'Technologies', 'Solutions', 'Dynamics', 'Enterprises', 'Group', 'International', 'Labs'];
      const reputations = ['Benevolent', 'Neutral', 'Aggressive', 'Secretive', 'Ruthless'];
      const threats = ['Low', 'Moderate', 'High', 'Extreme', 'Existential'];
      
      // Generate random corporation
      const type = corpTypes[Math.floor(Math.random() * corpTypes.length)];
      const size = corpSizes[Math.floor(Math.random() * corpSizes.length)];
      const prefix = corpPrefixes[Math.floor(Math.random() * corpPrefixes.length)];
      const suffix = corpSuffixes[Math.floor(Math.random() * corpSuffixes.length)];
      const reputation = reputations[Math.floor(Math.random() * reputations.length)];
      const threat = threats[Math.floor(Math.random() * threats.length)];
      
      const corpName = prefix + ' ' + suffix;
      
      // Generate leadership
      const ceoNames = ['Sarah Chen', 'Marcus Rodriguez', 'Dr. Elena Volkov', 'James Morrison', 'Akira Tanaka', 'Isabella Santos', 'Viktor Petrov', 'Maya Patel', 'David Kim', 'Rachel Zhang'];
      const ceo = ceoNames[Math.floor(Math.random() * ceoNames.length)];
      
      // Generate assets based on size
      const assetRanges = {
        'Startup': '50M - 100M eb',
        'Regional': '500M - 2B eb',
        'National': '5B - 20B eb',
        'Multinational': '50B - 200B eb',
        'Megacorporation': '500B+ eb'
      };
      
      const employees = {
        'Startup': '50 - 200',
        'Regional': '1,000 - 5,000',
        'National': '10,000 - 50,000',
        'Multinational': '100,000 - 500,000',
        'Megacorporation': '1,000,000+'
      };
      
      resultDiv.innerHTML = `
        <div style="color: #0ff;">
          <h4 style="color: #f0f; margin-bottom: 15px; font-size: 18px;">${corpName}</h4>
          
          <div style="margin-bottom: 15px;">
            <div style="color: #ff0; font-weight: bold; margin-bottom: 5px;">Corporate Profile</div>
            <div><strong>Industry:</strong> ${type}</div>
            <div><strong>Size:</strong> ${size}</div>
            <div><strong>Reputation:</strong> ${reputation}</div>
            <div><strong>Threat Level:</strong> ${threat}</div>
          </div>
          
          <div style="margin-bottom: 15px;">
            <div style="color: #ff0; font-weight: bold; margin-bottom: 5px;">Leadership</div>
            <div><strong>CEO:</strong> ${ceo}</div>
            <div><strong>Board Members:</strong> ${Math.floor(Math.random() * 8) + 3}</div>
            <div><strong>Division Heads:</strong> ${Math.floor(Math.random() * 12) + 4}</div>
          </div>
          
          <div style="margin-bottom: 15px;">
            <div style="color: #ff0; font-weight: bold; margin-bottom: 5px;">Resources</div>
            <div><strong>Estimated Assets:</strong> ${assetRanges[size]}</div>
            <div><strong>Employees:</strong> ${employees[size]}</div>
            <div><strong>Global Offices:</strong> ${Math.floor(Math.random() * 50) + (size === 'Megacorporation' ? 100 : 10)}</div>
          </div>
          
          <div style="margin-bottom: 15px;">
            <div style="color: #ff0; font-weight: bold; margin-bottom: 5px;">Operations</div>
            <div><strong>Primary Markets:</strong> ${generateMarkets()}</div>
            <div><strong>Key Projects:</strong> ${generateProjects(type)}</div>
            <div><strong>Security Level:</strong> ${generateSecurity(size)}</div>
          </div>
          
          <div>
            <div style="color: #ff0; font-weight: bold; margin-bottom: 5px;">Corporate Intelligence</div>
            <div style="font-size: 12px; line-height: 1.4;">
              ${generateCorpBackground(corpName, type, reputation)}
            </div>
          </div>
        </div>
      `;
    }
    
    // Gang Generation Logic
    function generateGang(panelId) {
      const resultDiv = document.getElementById('gang-result-' + panelId);
      
      // Gang data arrays
      const gangTypes = ['Street Gang', 'Biker Gang', 'Organized Crime', 'Corporate Gang', 'Cyber Gang', 'Nomad Pack', 'Combat Zone Crew', 'Smuggling Ring'];
      const gangPrefixes = ['Blood', 'Chrome', 'Neon', 'Steel', 'Shadow', 'Razor', 'Viper', 'Black', 'Red', 'Silver', 'Iron', 'Ghost'];
      const gangSuffixes = ['Devils', 'Runners', 'Wolves', 'Ravens', 'Serpents', 'Tigers', 'Eagles', 'Jackals', 'Panthers', 'Sharks'];
      const territories = ['Downtown', 'Industrial District', 'Combat Zone', 'Heywood', 'Watson', 'Pacifica', 'Santo Domingo', 'The Docks', 'Underground', 'Corporate Plaza'];
      const activities = ['Drug Trade', 'Cybernetics Theft', 'Protection Racket', 'Black Market Goods', 'Data Theft', 'Vehicle Theft', 'Arms Dealing', 'Human Trafficking', 'Corporate Espionage', 'Smuggling'];
      
      // Generate random gang
      const type = gangTypes[Math.floor(Math.random() * gangTypes.length)];
      const prefix = gangPrefixes[Math.floor(Math.random() * gangPrefixes.length)];
      const suffix = gangSuffixes[Math.floor(Math.random() * gangSuffixes.length)];
      const territory = territories[Math.floor(Math.random() * territories.length)];
      const activity1 = activities[Math.floor(Math.random() * activities.length)];
      const activity2 = activities[Math.floor(Math.random() * activities.length)];
      
      const gangName = prefix + ' ' + suffix;
      const memberCount = Math.floor(Math.random() * 200) + 20;
      
      // Generate leadership
      const leaderNames = ['Snake Rodriguez', 'Chrome Lisa', 'Iron Mike', 'Razor Jenny', 'Ghost Walker', 'Neon Kate', 'Steel Marcus', 'Shadow Quinn'];
      const leader = leaderNames[Math.floor(Math.random() * leaderNames.length)];
      
      // Generate rivals
      const rivalPrefixes = gangPrefixes.filter(p => p !== prefix);
      const rivalPrefix = rivalPrefixes[Math.floor(Math.random() * rivalPrefixes.length)];
      const rivalSuffix = gangSuffixes[Math.floor(Math.random() * gangSuffixes.length)];
      const rival = rivalPrefix + ' ' + rivalSuffix;
      
      resultDiv.innerHTML = `
        <div style="color: #0ff;">
          <h4 style="color: #f0f; margin-bottom: 15px; font-size: 18px;">${gangName}</h4>
          
          <div style="margin-bottom: 15px;">
            <div style="color: #ff0; font-weight: bold; margin-bottom: 5px;">Gang Profile</div>
            <div><strong>Type:</strong> ${type}</div>
            <div><strong>Territory:</strong> ${territory}</div>
            <div><strong>Members:</strong> ~${memberCount}</div>
            <div><strong>Threat Level:</strong> ${memberCount > 100 ? 'High' : memberCount > 50 ? 'Medium' : 'Low'}</div>
          </div>
          
          <div style="margin-bottom: 15px;">
            <div style="color: #ff0; font-weight: bold; margin-bottom: 5px;">Leadership</div>
            <div><strong>Leader:</strong> ${leader}</div>
            <div><strong>Lieutenants:</strong> ${Math.floor(memberCount / 25) + 1}</div>
            <div><strong>Structure:</strong> ${generateStructure(memberCount)}</div>
          </div>
          
          <div style="margin-bottom: 15px;">
            <div style="color: #ff0; font-weight: bold; margin-bottom: 5px;">Operations</div>
            <div><strong>Primary Activity:</strong> ${activity1}</div>
            <div><strong>Secondary Activity:</strong> ${activity2}</div>
            <div><strong>Income:</strong> ${generateIncome(memberCount)} eb/month</div>
          </div>
          
          <div style="margin-bottom: 15px;">
            <div style="color: #ff0; font-weight: bold; margin-bottom: 5px;">Relations</div>
            <div><strong>Primary Rival:</strong> ${rival}</div>
            <div><strong>Police Heat:</strong> ${generateHeat()}</div>
            <div><strong>Corporate Ties:</strong> ${generateCorpTies()}</div>
          </div>
          
          <div>
            <div style="color: #ff0; font-weight: bold; margin-bottom: 5px;">Street Intel</div>
            <div style="font-size: 12px; line-height: 1.4;">
              ${generateGangBackground(gangName, type, leader, territory)}
            </div>
          </div>
        </div>
      `;
    }
    
    // Helper functions for generation
    function generateMarkets() {
      const markets = ['North America', 'Europe', 'Asia-Pacific', 'South America', 'Africa', 'Middle East'];
      const count = Math.floor(Math.random() * 3) + 1;
      return markets.sort(() => 0.5 - Math.random()).slice(0, count).join(', ');
    }
    
    function generateProjects(type) {
      const projects = {
        'Biotechnology': ['Neural Enhancement Research', 'Synthetic Organ Development', 'Gene Therapy Trials'],
        'Military Technology': ['Next-Gen Combat Armor', 'Smart Weapons Development', 'Tactical AI Systems'],
        'Information Systems': ['Quantum Computing Network', 'Neural Interface Protocol', 'Data Mining Operations'],
        'Manufacturing': ['Automated Factory Systems', 'Nano-Material Production', 'Supply Chain Optimization'],
        'Security Services': ['Corporate Protection Division', 'Surveillance Network', 'Threat Assessment AI']
      };
      const typeProjects = projects[type] || ['Classified Research', 'Market Expansion', 'Technology Development'];
      return typeProjects[Math.floor(Math.random() * typeProjects.length)];
    }
    
    function generateSecurity(size) {
      const levels = {
        'Startup': 'Basic',
        'Regional': 'Standard',
        'National': 'Enhanced',
        'Multinational': 'Military Grade',
        'Megacorporation': 'Black Ops Level'
      };
      return levels[size];
    }
    
    function generateCorpBackground(name, type, reputation) {
      const backgrounds = {
        'Benevolent': `${name} maintains a positive public image through community investment and ethical business practices. They're known for treating employees well and contributing to social causes.`,
        'Neutral': `${name} operates with standard corporate practices, focusing primarily on profit while maintaining minimal public relations issues.`,
        'Aggressive': `${name} is known for hostile takeovers and aggressive market tactics. They eliminate competition through any means necessary.`,
        'Secretive': `${name} operates behind layers of shell companies and classified projects. Very little public information is available about their true activities.`,
        'Ruthless': `${name} has a reputation for extreme measures. Former employees rarely speak publicly, and competitors often face mysterious setbacks.`
      };
      return backgrounds[reputation];
    }
    
    function generateStructure(members) {
      if (members > 150) return 'Hierarchical (Multiple Cells)';
      if (members > 75) return 'Organized (Lieutenant System)';
      if (members > 30) return 'Semi-Organized (Crew Based)';
      return 'Loose (Leadership Circle)';
    }
    
    function generateIncome(members) {
      const baseIncome = members * 500;
      const variance = Math.floor(Math.random() * baseIncome * 0.5);
      return (baseIncome + variance).toLocaleString();
    }
    
    function generateHeat() {
      const levels = ['Cold', 'Warm', 'Hot', 'Burning'];
      return levels[Math.floor(Math.random() * levels.length)];
    }
    
    function generateCorpTies() {
      const ties = ['None Known', 'Suspected Connections', 'Confirmed Corporate Sponsor', 'Corporate Front Operation'];
      return ties[Math.floor(Math.random() * ties.length)];
    }
    
    function generateGangBackground(name, type, leader, territory) {
      const backgrounds = [
        `The ${name} emerged from the economic collapse in ${territory}, led by the charismatic ${leader}. They've carved out a reputation for reliability in their operations.`,
        `Originally formed as a ${type.toLowerCase()}, the ${name} has grown under ${leader}'s leadership to control significant portions of ${territory}.`,
        `${leader} founded the ${name} after a corporate betrayal left them seeking revenge. They've built a loyal following in ${territory} through shared hatred of the system.`,
        `The ${name} started as protection for local businesses in ${territory} but has evolved into a major criminal organization under ${leader}'s guidance.`
      ];
      return backgrounds[Math.floor(Math.random() * backgrounds.length)];
    }
    
    // Missing panel creation functions
    function createQuickRulesPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = 'quick-rules-' + Date.now();
      window.panelSystem.createPanel({
        title: 'Quick Rules Reference',
        content: '<div style="padding: 20px; height: 100%; overflow-y: auto; background: rgba(0,0,0,0.9); color: #00ff41; font-family: \'Courier New\', monospace;">' +
          '<h2 style="color: #ff0040; text-align: center;">CYBERPUNK RED - QUICK RULES</h2>' +
          '<div style="border: 1px solid #00ff41; padding: 15px; margin: 10px 0; background: rgba(0,255,65,0.1);">' +
            '<h3 style="color: #ff0040; margin-top: 0;">Basic Roll: 1d10 + STAT + SKILL</h3>' +
            '<ul>' +
              '<li><strong>DV 8:</strong> Easy</li>' +
              '<li><strong>DV 12:</strong> Everyday</li>' +
              '<li><strong>DV 15:</strong> Professional</li>' +
              '<li><strong>DV 17:</strong> Expert</li>' +
              '<li><strong>DV 21:</strong> Master</li>' +
              '<li><strong>DV 24:</strong> Legendary</li>' +
            '</ul>' +
          '</div>' +
          '<div style="border: 1px solid #00ff41; padding: 15px; margin: 10px 0; background: rgba(0,255,65,0.1);">' +
            '<h3 style="color: #ff0040; margin-top: 0;">Combat</h3>' +
            '<ul>' +
              '<li><strong>Initiative:</strong> REF + 1d10</li>' +
              '<li><strong>Attack:</strong> STAT + Weapon Skill + 1d10 vs DV 13</li>' +
              '<li><strong>Damage:</strong> Weapon damage + modifiers</li>' +
              '<li><strong>Critical:</strong> Natural 10 = max damage + roll again</li>' +
              '<li><strong>Fumble:</strong> Natural 1 = weapon jams/breaks</li>' +
            '</ul>' +
          '</div>' +
          '<div style="border: 1px solid #00ff41; padding: 15px; margin: 10px 0; background: rgba(0,255,65,0.1);">' +
            '<h3 style="color: #ff0040; margin-top: 0;">Damage & Death</h3>' +
            '<ul>' +
              '<li><strong>0 HP:</strong> Seriously Wounded - Death Saves required</li>' +
              '<li><strong>Death Save:</strong> BODY + 1d10 vs DV 15</li>' +
              '<li><strong>4 failed saves:</strong> Death</li>' +
              '<li><strong>SP:</strong> Armor reduces damage by SP value</li>' +
            '</ul>' +
          '</div>' +
        '</div>',
        position: { x: 320, y: 120 },
        size: { width: 600, height: 500 }
      });
    }
    
    function createTimelinePanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = 'timeline-' + Date.now();
      window.panelSystem.createPanel({
        title: 'Campaign Timeline',
        content: '<div style="padding: 20px; height: 100%; overflow-y: auto; background: rgba(0,0,0,0.9);">' +
          '<h3 style="color: var(--primary); margin-bottom: 20px;">Campaign Timeline Tracker</h3>' +
          '<div style="border: 1px solid var(--border-color); padding: 15px; margin-bottom: 15px;">' +
            '<button onclick="addTimelineEvent()" style="background: var(--primary); color: black; border: none; padding: 8px 16px; cursor: pointer; margin-bottom: 15px;">Add Event</button>' +
            '<div id="timeline-events-' + uniqueId + '" style="max-height: 400px; overflow-y: auto;">' +
              '<div style="border-left: 3px solid var(--primary); padding-left: 15px; margin-bottom: 15px;">' +
                '<strong style="color: var(--primary);">Session 1 - 2045.03.15</strong>' +
                '<p>Campaign begins. Characters meet at the Afterlife.</p>' +
              '</div>' +
            '</div>' +
          '</div>' +
        '</div>',
        position: { x: 340, y: 140 },
        size: { width: 500, height: 600 }
      });
      
      // Add the timeline function globally
      window.addTimelineEvent = function() {
        const date = prompt('Enter date (YYYY.MM.DD):');
        const event = prompt('Enter event description:');
        if (date && event) {
          const container = document.getElementById('timeline-events-' + uniqueId);
          if (container) {
            const eventDiv = document.createElement('div');
            eventDiv.style.cssText = 'border-left: 3px solid var(--primary); padding-left: 15px; margin-bottom: 15px;';
            eventDiv.innerHTML = '<strong style="color: var(--primary);">' + date + '</strong><p>' + event + '</p>';
            container.appendChild(eventDiv);
          }
        }
      };
    }
    
    function createReputationPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = 'reputation-' + Date.now();
      window.panelSystem.createPanel({
        title: 'Reputation Tracker',
        content: '<div style="padding: 20px; height: 100%; overflow-y: auto; background: rgba(0,0,0,0.9);">' +
          '<h3 style="color: var(--primary); margin-bottom: 20px;">Character Reputation</h3>' +
          '<div style="display: grid; gap: 15px;">' +
            '<div style="border: 1px solid var(--border-color); padding: 15px;">' +
              '<h4 style="color: var(--primary); margin-top: 0;">Street Cred</h4>' +
              '<div style="display: flex; align-items: center; gap: 10px;">' +
                '<span>Level:</span>' +
                '<input type="number" id="street-cred-' + uniqueId + '" value="1" min="1" max="10" style="width: 60px; padding: 4px;">' +
                '<button onclick="updateReputation(\'street-cred-' + uniqueId + '\')" style="background: var(--primary); color: black; border: none; padding: 4px 8px; cursor: pointer;">Update</button>' +
              '</div>' +
            '</div>' +
            '<div style="border: 1px solid var(--border-color); padding: 15px;">' +
              '<h4 style="color: var(--primary); margin-top: 0;">Corporate Standing</h4>' +
              '<div style="display: flex; align-items: center; gap: 10px;">' +
                '<span>Level:</span>' +
                '<input type="number" id="corp-standing-' + uniqueId + '" value="0" min="-10" max="10" style="width: 60px; padding: 4px;">' +
                '<button onclick="updateReputation(\'corp-standing-' + uniqueId + '\')" style="background: var(--primary); color: black; border: none; padding: 4px 8px; cursor: pointer;">Update</button>' +
              '</div>' +
            '</div>' +
            '<div style="border: 1px solid var(--border-color); padding: 15px;">' +
              '<h4 style="color: var(--primary); margin-top: 0;">Gang Relations</h4>' +
              '<textarea id="gang-relations-' + uniqueId + '" placeholder="Track relationships with various gangs..." style="width: 100%; height: 100px; padding: 8px; background: var(--bg-surface); color: var(--text-primary); border: 1px solid var(--border-color);"></textarea>' +
            '</div>' +
          '</div>' +
        '</div>',
        position: { x: 360, y: 160 },
        size: { width: 450, height: 500 }
      });
      
      window.updateReputation = function(elementId) {
        const element = document.getElementById(elementId);
        if (element) {
          const value = element.value;
          console.log('Updated ' + elementId + ' to ' + value);
          element.style.background = '#90EE90';
          setTimeout(function() {
            element.style.background = '';
          }, 500);
        }
      };
    }
    
    function createPlotHookPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = 'plot-hooks-' + Date.now();
      window.panelSystem.createPanel({
        title: 'Plot Hook Generator',
        content: '<div style="padding: 20px; height: 100%; overflow-y: auto; background: rgba(0,0,0,0.9); color: #00ff41; font-family: \'Courier New\', monospace;">' +
          '<h3 style="color: #ff0040; margin-bottom: 20px;">CYBERPUNK PLOT HOOKS</h3>' +
          '<button onclick="generatePlotHook()" style="width: 100%; padding: 12px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer; margin-bottom: 20px; font-weight: bold;">GENERATE PLOT HOOK</button>' +
          '<div id="plot-hook-result-' + uniqueId + '" style="border: 1px solid #00ff41; padding: 15px; background: rgba(0,255,65,0.1); min-height: 200px;">' +
            '<div style="color: #666; text-align: center; padding: 40px;">Click "Generate Plot Hook" to create a new adventure hook</div>' +
          '</div>' +
          '<div style="margin-top: 15px; padding: 10px; border: 1px solid #444; background: rgba(255,255,255,0.05);">' +
            '<div style="font-size: 12px; color: #888;">' +
              '<strong>Categories:</strong><br>' +
              '• Corporate Espionage & Betrayal<br>' +
              '• Street Gang Wars & Territory<br>' +
              '• Netrunning & Digital Mysteries<br>' +
              '• Personal Vendettas & Past Sins<br>' +
              '• Tech Heists & Black Market<br>' +
              '• Police Corruption & Cover-ups' +
            '</div>' +
          '</div>' +
        '</div>',
        position: { x: 380, y: 180 },
        size: { width: 550, height: 600 }
      });
      
      window.generatePlotHook = function() {
        const hooks = [
          {
            title: "The Arasaka Defector",
            description: "A mid-level Arasaka executive contacts the team with stolen corporate data about a new cybernetic enhancement program. The catch? They're being hunted by both corpo security and their own family.",
            complications: "The data is encrypted, rival edgerunners want it, and the defector may not be who they claim to be."
          },
          {
            title: "Digital Ghost Hunt", 
            description: "A rogue AI has been spotted in the local NET infrastructure, causing blackouts and data corruption. Someone is paying good eddies to track it down and neutralize it.",
            complications: "The AI might be sentient, corpo netrunners are also hunting it, and it seems to know things about the characters' past."
          },
          {
            title: "Street War Mediation",
            description: "Two gangs are about to go to war over disputed territory. A local fixer wants the team to either prevent the war or ensure their preferred side wins.",
            complications: "Both gangs have corpo backing, civilian casualties are mounting, and there's a mole feeding information to NCPD."
          },
          {
            title: "The Memory Thief",
            description: "Someone is stealing and selling people's memories on the black market. The victims don't remember what was taken, and one of them is connected to a character's past.",
            complications: "The thief uses military-grade neuralware, the memories contain dangerous secrets, and the buyer might be someone unexpected."
          },
          {
            title: "Corpo Data Heist",
            description: "A simple data extraction job from a Militech facility becomes complicated when the team discovers the data concerns a weapons program that could shift the balance of power.",
            complications: "Security is tighter than expected, there are multiple teams after the same data, and extraction might mean leaving witnesses."
          },
          {
            title: "The Disappeared",
            description: "People have been vanishing from the Combat Zone. No bodies, no ransom demands, just gone. Someone wants to know why, and they're willing to pay the team to find out.",
            complications: "The disappearances follow a pattern, corpo black ops might be involved, and some of the missing had connections to the characters."
          }
        ];
        
        const randomHook = hooks[Math.floor(Math.random() * hooks.length)];
        const resultDiv = document.getElementById('plot-hook-result-' + uniqueId);
        
        if (resultDiv) {
          resultDiv.innerHTML = '<h4 style="color: #ff0040; margin-top: 0;">' + randomHook.title + '</h4>' +
            '<p style="line-height: 1.6; margin-bottom: 15px;"><strong>Hook:</strong> ' + randomHook.description + '</p>' +
            '<p style="line-height: 1.6; color: #ffff00;"><strong>Complications:</strong> ' + randomHook.complications + '</p>';
        }
      };
    }
    
    function createRandomTablesPanel() {
      if (!window.panelSystem) {
        console.error('Panel system not initialized');
        return;
      }
      
      const uniqueId = 'random-tables-' + Date.now();
      window.panelSystem.createPanel({
        title: 'Cyberpunk Random Tables',
        content: '<div style="padding: 20px; height: 100%; overflow-y: auto; background: rgba(0,0,0,0.9); color: #00ff41; font-family: \'Courier New\', monospace;">' +
          '<h2 style="color: #ff0040; text-align: center; margin-bottom: 20px;">RANDOM TABLES GENERATOR</h2>' +
          
          '<div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; margin-bottom: 20px;">' +
            '<button onclick="generateRandomName()" style="padding: 10px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer; font-weight: bold;">NAMES</button>' +
            '<button onclick="generateRandomLocation()" style="padding: 10px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer; font-weight: bold;">LOCATIONS</button>' +
            '<button onclick="generateRandomNPC()" style="padding: 10px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer; font-weight: bold;">NPCs</button>' +
            '<button onclick="generateRandomEncounter()" style="padding: 10px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer; font-weight: bold;">ENCOUNTERS</button>' +
            '<button onclick="generateRandomLoot()" style="padding: 10px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer; font-weight: bold;">LOOT</button>' +
            '<button onclick="generateRandomWeather()" style="padding: 10px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer; font-weight: bold;">WEATHER</button>' +
            '<button onclick="generateRandomNews()" style="padding: 10px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer; font-weight: bold;">NEWS</button>' +
            '<button onclick="generateRandomComplication()" style="padding: 10px; background: #0f4f4f; border: 1px solid #00ff41; color: #00ff41; cursor: pointer; font-weight: bold;">COMPLICATIONS</button>' +
            '<button onclick="clearRandomResults()" style="padding: 10px; background: #4f0f0f; border: 1px solid #ff0040; color: #ff0040; cursor: pointer; font-weight: bold;">CLEAR</button>' +
          '</div>' +
          
          '<div id="random-results-' + uniqueId + '" style="border: 1px solid #00ff41; padding: 15px; background: rgba(0,255,65,0.1); min-height: 300px; max-height: 400px; overflow-y: auto;">' +
            '<div style="color: #666; text-align: center; padding: 40px;">Click any button above to generate random content for your game</div>' +
          '</div>' +
          
          '<div style="margin-top: 15px; padding: 10px; border: 1px solid #444; background: rgba(255,255,255,0.05);">' +
            '<div style="font-size: 12px; color: #888;">' +
              '<strong>Available Tables:</strong><br>' +
              '• Names: Corporate execs, street contacts, gang members<br>' +
              '• Locations: Businesses, landmarks, hideouts<br>' +
              '• NPCs: Quick personality and motivation<br>' +
              '• Encounters: Street events and complications<br>' +
              '• Loot: Gear, eddies, and valuable data<br>' +
              '• Weather: Night City atmospheric conditions<br>' +
              '• News: Current events and rumors<br>' +
              '• Complications: Mission obstacles and twists' +
            '</div>' +
          '</div>' +
        '</div>',
        position: { x: 340, y: 120 },
        size: { width: 700, height: 650 }
      });
      
      // Random table functions
      window.generateRandomName = function() {
        const nameCategories = {
          corporate: {
            first: ['Alexander', 'Victoria', 'Marcus', 'Isabella', 'Jonathan', 'Anastasia', 'Sebastian', 'Cordelia', 'Maximilian', 'Seraphina'],
            last: ['Blackwood', 'Sterling', 'Ashworth', 'Pemberton', 'Goldstein', 'Vandenberg', 'Rothschild', 'Winchester', 'Harrington', 'Beaumont']
          },
          street: {
            names: ['Razor', 'Neon', 'Ghost', 'Jinx', 'Spike', 'Chrome', 'Void', 'Flash', 'Skull', 'Wire', 'Ace', 'Bolt', 'Echo', 'Frost', 'Nova']
          },
          gang: {
            prefixes: ['Blood', 'Steel', 'Neon', 'Chrome', 'Shadow', 'Iron', 'Electric', 'Cyber', 'Dark', 'Red'],
            suffixes: ['Serpents', 'Wolves', 'Ravens', 'Tigers', 'Dragons', 'Hawks', 'Scorpions', 'Sharks', 'Panthers', 'Eagles']
          }
        };
        
        const category = ['corporate', 'street', 'gang'][Math.floor(Math.random() * 3)];
        let result = '';
        
        if (category === 'corporate') {
          const first = nameCategories.corporate.first[Math.floor(Math.random() * nameCategories.corporate.first.length)];
          const last = nameCategories.corporate.last[Math.floor(Math.random() * nameCategories.corporate.last.length)];
          result = '<strong style="color: #ff0040;">CORPORATE NAME:</strong> ' + first + ' ' + last;
        } else if (category === 'street') {
          const name = nameCategories.street.names[Math.floor(Math.random() * nameCategories.street.names.length)];
          result = '<strong style="color: #ff0040;">STREET NAME:</strong> ' + name;
        } else {
          const prefix = nameCategories.gang.prefixes[Math.floor(Math.random() * nameCategories.gang.prefixes.length)];
          const suffix = nameCategories.gang.suffixes[Math.floor(Math.random() * nameCategories.gang.suffixes.length)];
          result = '<strong style="color: #ff0040;">GANG NAME:</strong> ' + prefix + ' ' + suffix;
        }
        
        addRandomResult(result);
      };
      
      window.generateRandomLocation = function() {
        const locations = [
          'Afterlife Bar - Legendary merc hangout with BD booths',
          'Corpo Plaza - Gleaming towers and security checkpoints',
          'Night Market - Black market tech and illegal mods',
          'Megabuilding H10 - Cramped apartments and gang territory',
          'The Ripperdoc - Back-alley cybernetics installation',
          'DataKrash Cafe - Netrunner meeting spot with ice cream',
          'Chrome Rock - Heavy metal club with combat arena',
          'Arasaka Tower - Imposing corporate headquarters',
          'Jig-Jig Street - Red light district with braindances',
          'Pacifica Boardwalk - Abandoned tourist trap and gang wars',
          'Santo Domingo Power Plant - Industrial wasteland',
          'Glen Garage - Nomad vehicle maintenance depot',
          'Clouds - High-end doll house for the wealthy',
          'Riot Club - Underground fight club with betting',
          'Net Cafe 54 - Netrunning access point and info broker'
        ];
        
        const location = locations[Math.floor(Math.random() * locations.length)];
        addRandomResult('<strong style="color: #ff0040;">LOCATION:</strong> ' + location);
      };
      
      window.generateRandomNPC = function() {
        const personalities = ['Paranoid', 'Aggressive', 'Charming', 'Nervous', 'Arrogant', 'Friendly', 'Suspicious', 'Calm', 'Eccentric', 'Ruthless'];
        const motivations = ['Money', 'Revenge', 'Power', 'Survival', 'Family', 'Knowledge', 'Fame', 'Justice', 'Freedom', 'Love'];
        const appearances = ['Heavily chromed', 'Corp suit', 'Street punk', 'Gang colors', 'Military surplus', 'High fashion', 'Worn leather', 'Neon accessories', 'Minimal cyber', 'Full conversion'];
        
        const personality = personalities[Math.floor(Math.random() * personalities.length)];
        const motivation = motivations[Math.floor(Math.random() * motivations.length)];
        const appearance = appearances[Math.floor(Math.random() * appearances.length)];
        
        const result = '<strong style="color: #ff0040;">NPC:</strong><br>' +
          '• Personality: ' + personality + '<br>' +
          '• Motivation: ' + motivation + '<br>' +
          '• Appearance: ' + appearance;
        
        addRandomResult(result);
      };
      
      window.generateRandomEncounter = function() {
        const encounters = [
          'Gang turf war blocks the street - choose sides or find another route',
          'NCPD checkpoint ahead - papers and bribes required',
          'Corpo exec being mugged - intervention could mean reward or trouble',
          'Maelstrom members selling hot cyberware at discount prices',
          'Netrunner cafe getting raided by Trauma Team',
          'Street racing through busy intersection - chaos and opportunity',
          'Vending machine malfunction dispensing free items',
          'Corpo spy meeting contact in public - potential blackmail',
          'Gang initiation happening - witness or participate',
          'Ripperdoc being extorted by protection racket',
          'Black market organ dealer setting up shop',
          'NCPD drones scanning for wanted criminals',
          'Corporate convoy transporting mysterious cargo',
          'Street preacher warning about corporate mind control',
          'Nomad family seeking safe passage through the city'
        ];
        
        const encounter = encounters[Math.floor(Math.random() * encounters.length)];
        addRandomResult('<strong style="color: #ff0040;">ENCOUNTER:</strong> ' + encounter);
      };
      
      window.generateRandomLoot = function() {
        const lootTypes = ['gear', 'money', 'data'];
        const type = lootTypes[Math.floor(Math.random() * lootTypes.length)];
        let result = '';
        
        if (type === 'gear') {
          const gear = [
            'Militech M-10AF Lexington pistol with smart targeting',
            'Zetatech Sensory Booster +2 cyberware',
            'Corpo-grade armored jacket (SP 11)',
            'Encrypted data shard with corporate secrets',
            'Rare cyberware component worth 2000eb',
            'Modified vehicle with nitrous and armor',
            'Military-grade netrunning deck',
            'Stolen Arasaka security badge',
            'Black market pharmaceuticals (healing items)',
            'High-end braindance with valuable intel'
          ];
          const item = gear[Math.floor(Math.random() * gear.length)];
          result = '<strong style="color: #ff0040;">GEAR:</strong> ' + item;
        } else if (type === 'money') {
          const amount = [50, 100, 250, 500, 1000, 1500, 2000, 3000, 5000][Math.floor(Math.random() * 9)];
          result = '<strong style="color: #ff0040;">EDDIES:</strong> ' + amount + 'eb';
        } else {
          const data = [
            'Corporate executive dirty secrets',
            'Gang territory maps and safe houses',
            'Netrunner contact database',
            'Black market supplier list',
            'NCPD patrol schedules',
            'Corpo research project details',
            'Underground fight club betting odds',
            'Ripperdoc surgery records',
            'Nomad clan trade routes',
            'Media contact information'
          ];
          const info = data[Math.floor(Math.random() * data.length)];
          result = '<strong style="color: #ff0040;">DATA:</strong> ' + info;
        }
        
        addRandomResult(result);
      };
      
      window.generateRandomWeather = function() {
        const weather = [
          'Acid rain - visibility reduced, electronics at risk',
          'Toxic smog - air filtration recommended',
          'Neon-lit fog - colorful but dangerous to breathe',
          'Clear night - rare occurrence, gangs more active',
          'Electrical storm - net access unstable',
          'Heat wave - cooling systems failing across the city',
          'Radioactive fallout - hazmat gear recommended',
          'Dust storm from the Badlands - reduced visibility',
          'Corporate weather control malfunction - chaotic conditions',
          'Blood rain - red-tinted precipitation from pollution'
        ];
        
        const condition = weather[Math.floor(Math.random() * weather.length)];
        addRandomResult('<strong style="color: #ff0040;">WEATHER:</strong> ' + condition);
      };
      
      window.generateRandomNews = function() {
        const news = [
          'Arasaka stock reaches new high after successful neural interface trials',
          'Gang war in Watson leaves 12 dead, NCPD investigating',
          'Militech unveils new combat cyberware line for civilians',
          'Net blackout affects downtown district for 6 hours',
          'Celebrity braindance star found dead in apparent suicide',
          'Nomad convoy attacked by unknown assailants outside city',
          'New pharmaceutical enhances combat reflexes, side effects unknown',
          'Corpo exec assassinated during board meeting, shares plummet',
          'Underground fight club raided, illegal cybernetics seized',
          'Netrunner collective claims responsibility for data breach'
        ];
        
        const newsItem = news[Math.floor(Math.random() * news.length)];
        addRandomResult('<strong style="color: #ff0040;">NEWS:</strong> ' + newsItem);
      };
      
      window.generateRandomComplication = function() {
        const complications = [
          'Mission target has been moved to a more secure location',
          'Rival team is also after the same objective',
          'Client has been arrested and cannot pay',
          'Target location is under NCPD surveillance',
          'Key contact has been compromised and may be unreliable',
          'Weather conditions make extraction difficult',
          'Corporate security has been upgraded unexpectedly',
          'Gang war erupts in the mission area',
          'Netrunner support is unavailable due to ICE attack',
          'Mission deadline moved up by 24 hours',
          'Innocent civilians are in the line of fire',
          'Equipment malfunction at critical moment',
          'Double-cross by supposed ally',
          'Media attention threatens mission secrecy',
          'Backup escape route has been compromised'
        ];
        
        const complication = complications[Math.floor(Math.random() * complications.length)];
        addRandomResult('<strong style="color: #ff0040;">COMPLICATION:</strong> ' + complication);
      };
      
      window.clearRandomResults = function() {
        const resultsDiv = document.getElementById('random-results-' + uniqueId);
        if (resultsDiv) {
          resultsDiv.innerHTML = '<div style="color: #666; text-align: center; padding: 40px;">Results cleared - click any button above to generate new content</div>';
        }
      };
      
      function addRandomResult(text) {
        const resultsDiv = document.getElementById('random-results-' + uniqueId);
        if (resultsDiv) {
          if (resultsDiv.innerHTML.includes('click any button above') || resultsDiv.innerHTML.includes('Results cleared')) {
            resultsDiv.innerHTML = '';
          }
          
          const entry = document.createElement('div');
          entry.style.cssText = 'border-bottom: 1px solid rgba(0,255,65,0.3); padding: 10px 0; margin-bottom: 10px;';
          entry.innerHTML = '<div style="font-size: 12px; color: #888; margin-bottom: 5px;">[' + new Date().toLocaleTimeString() + ']</div>' + text;
          resultsDiv.appendChild(entry);
          resultsDiv.scrollTop = resultsDiv.scrollHeight;
        }
      }
    }
  </script>
  
  <!-- User Profile Manager -->
  <script src="src/js/user-profile-manager.js"></script>
  
  <!-- Notes File Manager -->
  <script src="src/js/notes-file-manager.js"></script>
  
  <!-- Night City Map -->
  <script src="src/js/night-city-map.js"></script>
  
  <!-- Test Suite (Development Only) -->
  <script src="src/js/panel-test-suite.js"></script>
</body>
</html>